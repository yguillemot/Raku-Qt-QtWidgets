
// 
// This file has been automatically generated by RaQt_maker V0.0.7.
// To modify and regenerate it, see the source code available here: 
//         https://github.com/yguillemot/RaQt_maker
// 

#include "QGridLayout.hpp"

void * QWQGridLayoutCtor_1(void * parent)
{
    QWidget * xparent = reinterpret_cast<QWidget *>(parent);
    QGridLayout * ptr = new QGridLayout(xparent);
    return reinterpret_cast<void *>(ptr);
}

void * SCWQGridLayoutCtor_1(void * parent)
{
    QWidget * xparent = reinterpret_cast<QWidget *>(parent);
    SCQGridLayout * ptr = new SCQGridLayout(xparent);
    return reinterpret_cast<void *>(ptr);
}

void * QWQGridLayoutCtor_2()
{
    QGridLayout * ptr = new QGridLayout();
    return reinterpret_cast<void *>(ptr);
}

void * SCWQGridLayoutCtor_2()
{
    SCQGridLayout * ptr = new SCQGridLayout();
    return reinterpret_cast<void *>(ptr);
}

void QWQGridLayoutsetHorizontalSpacing(void * obj, int32_t  spacing)
{
    QGridLayout * ptr = reinterpret_cast<QGridLayout *>(obj);
    int xspacing = spacing;
    ptr->setHorizontalSpacing(xspacing);
}

int32_t QWQGridLayouthorizontalSpacing(void * obj)
{
    QGridLayout * ptr = reinterpret_cast<QGridLayout *>(obj);
    int retVal = ptr->horizontalSpacing();
    return retVal;
}

void QWQGridLayoutsetVerticalSpacing(void * obj, int32_t  spacing)
{
    QGridLayout * ptr = reinterpret_cast<QGridLayout *>(obj);
    int xspacing = spacing;
    ptr->setVerticalSpacing(xspacing);
}

int32_t QWQGridLayoutverticalSpacing(void * obj)
{
    QGridLayout * ptr = reinterpret_cast<QGridLayout *>(obj);
    int retVal = ptr->verticalSpacing();
    return retVal;
}

void QWQGridLayoutsetSpacing(void * obj, int32_t  spacing)
{
    QGridLayout * ptr = reinterpret_cast<QGridLayout *>(obj);
    int xspacing = spacing;
    ptr->setSpacing(xspacing);
}

int32_t QWQGridLayoutspacing(void * obj)
{
    QGridLayout * ptr = reinterpret_cast<QGridLayout *>(obj);
    int retVal = ptr->spacing();
    return retVal;
}

void QWQGridLayoutsetRowStretch(void * obj, int32_t  row, int32_t  stretch)
{
    QGridLayout * ptr = reinterpret_cast<QGridLayout *>(obj);
    int xrow = row;
    int xstretch = stretch;
    ptr->setRowStretch(xrow, xstretch);
}

void QWQGridLayoutsetColumnStretch(void * obj, int32_t  column, int32_t  stretch)
{
    QGridLayout * ptr = reinterpret_cast<QGridLayout *>(obj);
    int xcolumn = column;
    int xstretch = stretch;
    ptr->setColumnStretch(xcolumn, xstretch);
}

int32_t QWQGridLayoutrowStretch(void * obj, int32_t  row)
{
    QGridLayout * ptr = reinterpret_cast<QGridLayout *>(obj);
    int xrow = row;
    int retVal = ptr->rowStretch(xrow);
    return retVal;
}

int32_t QWQGridLayoutcolumnStretch(void * obj, int32_t  column)
{
    QGridLayout * ptr = reinterpret_cast<QGridLayout *>(obj);
    int xcolumn = column;
    int retVal = ptr->columnStretch(xcolumn);
    return retVal;
}

void QWQGridLayoutsetRowMinimumHeight(void * obj, int32_t  row, int32_t  minSize)
{
    QGridLayout * ptr = reinterpret_cast<QGridLayout *>(obj);
    int xrow = row;
    int xminSize = minSize;
    ptr->setRowMinimumHeight(xrow, xminSize);
}

void QWQGridLayoutsetColumnMinimumWidth(void * obj, int32_t  column, int32_t  minSize)
{
    QGridLayout * ptr = reinterpret_cast<QGridLayout *>(obj);
    int xcolumn = column;
    int xminSize = minSize;
    ptr->setColumnMinimumWidth(xcolumn, xminSize);
}

int32_t QWQGridLayoutrowMinimumHeight(void * obj, int32_t  row)
{
    QGridLayout * ptr = reinterpret_cast<QGridLayout *>(obj);
    int xrow = row;
    int retVal = ptr->rowMinimumHeight(xrow);
    return retVal;
}

int32_t QWQGridLayoutcolumnMinimumWidth(void * obj, int32_t  column)
{
    QGridLayout * ptr = reinterpret_cast<QGridLayout *>(obj);
    int xcolumn = column;
    int retVal = ptr->columnMinimumWidth(xcolumn);
    return retVal;
}

int32_t QWQGridLayoutcolumnCount(void * obj)
{
    QGridLayout * ptr = reinterpret_cast<QGridLayout *>(obj);
    int retVal = ptr->columnCount();
    return retVal;
}

int32_t QWQGridLayoutrowCount(void * obj)
{
    QGridLayout * ptr = reinterpret_cast<QGridLayout *>(obj);
    int retVal = ptr->rowCount();
    return retVal;
}

void * QWQGridLayoutcellRect(void * obj, int32_t  row, int32_t  column)
{
    QGridLayout * ptr = reinterpret_cast<QGridLayout *>(obj);
    int xrow = row;
    int xcolumn = column;
    QRect retVal = ptr->cellRect(xrow, xcolumn);
    QRect * xxretVal = new QRect(retVal);
    void * xretVal = reinterpret_cast<void *>(xxretVal);
    return xretVal;
}

void QWQGridLayoutaddWidget_2(void * obj, void * arg1, int32_t  row, int32_t  column, int  arg4)
{
    QGridLayout * ptr = reinterpret_cast<QGridLayout *>(obj);
    QWidget * xarg1 = reinterpret_cast<QWidget *>(arg1);
    int xrow = row;
    int xcolumn = column;
    Qt::Alignment xarg4 = static_cast<Qt::Alignment>(arg4);
    ptr->addWidget(xarg1, xrow, xcolumn, xarg4);
}

void QWQGridLayoutaddWidget_3(void * obj, void * arg1, int32_t  row, int32_t  column, int32_t  rowSpan, int32_t  columnSpan, int  arg6)
{
    QGridLayout * ptr = reinterpret_cast<QGridLayout *>(obj);
    QWidget * xarg1 = reinterpret_cast<QWidget *>(arg1);
    int xrow = row;
    int xcolumn = column;
    int xrowSpan = rowSpan;
    int xcolumnSpan = columnSpan;
    Qt::Alignment xarg6 = static_cast<Qt::Alignment>(arg6);
    ptr->addWidget(xarg1, xrow, xcolumn, xrowSpan, xcolumnSpan, xarg6);
}

void QWQGridLayoutaddLayout_1(void * obj, void * arg1, int32_t  row, int32_t  column, int  arg4)
{
    QGridLayout * ptr = reinterpret_cast<QGridLayout *>(obj);
    QLayout * xarg1 = reinterpret_cast<QLayout *>(arg1);
    int xrow = row;
    int xcolumn = column;
    Qt::Alignment xarg4 = static_cast<Qt::Alignment>(arg4);
    ptr->addLayout(xarg1, xrow, xcolumn, xarg4);
}

void QWQGridLayoutaddLayout_2(void * obj, void * arg1, int32_t  row, int32_t  column, int32_t  rowSpan, int32_t  columnSpan, int  arg6)
{
    QGridLayout * ptr = reinterpret_cast<QGridLayout *>(obj);
    QLayout * xarg1 = reinterpret_cast<QLayout *>(arg1);
    int xrow = row;
    int xcolumn = column;
    int xrowSpan = rowSpan;
    int xcolumnSpan = columnSpan;
    Qt::Alignment xarg6 = static_cast<Qt::Alignment>(arg6);
    ptr->addLayout(xarg1, xrow, xcolumn, xrowSpan, xcolumnSpan, xarg6);
}

void QWvalidateCB_QGridLayout(void *obj, int32_t objId, char *methodName)
{
    SCQGridLayout * ptr = reinterpret_cast<SCQGridLayout *>(obj);

    ptr->validateEvent(objId, methodName);

}
void QWQGridLayoutDtor(void * obj)
{
    QGridLayout * ptr = reinterpret_cast<QGridLayout *>(obj);
    delete ptr;
}

void SCWQGridLayoutDtor(void * obj)
{
    QGridLayout * ptr = reinterpret_cast<QGridLayout *>(obj);
    delete ptr;
}

