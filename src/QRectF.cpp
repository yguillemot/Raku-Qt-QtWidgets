
// 
// This file has been automatically generated by RaQt_maker V0.0.7.
// To modify and regenerate it, see the source code available here: 
//         https://github.com/yguillemot/RaQt_maker
// 

#include "QRectF.hpp"

void * QWQRectFCtor_1()
{
    QRectF * ptr = new QRectF();
    return reinterpret_cast<void *>(ptr);
}

void * SCWQRectFCtor_1()
{
    SCQRectF * ptr = new SCQRectF();
    return reinterpret_cast<void *>(ptr);
}

void * QWQRectFCtor_2(void * topleft, void * size)
{
    QPointF & xtopleft = * reinterpret_cast<QPointF *>(topleft);
    QSizeF & xsize = * reinterpret_cast<QSizeF *>(size);
    QRectF * ptr = new QRectF(xtopleft, xsize);
    return reinterpret_cast<void *>(ptr);
}

void * SCWQRectFCtor_2(void * topleft, void * size)
{
    QPointF & xtopleft = * reinterpret_cast<QPointF *>(topleft);
    QSizeF & xsize = * reinterpret_cast<QSizeF *>(size);
    SCQRectF * ptr = new SCQRectF(xtopleft, xsize);
    return reinterpret_cast<void *>(ptr);
}

void * QWQRectFCtor_3(void * topleft, void * bottomRight)
{
    QPointF & xtopleft = * reinterpret_cast<QPointF *>(topleft);
    QPointF & xbottomRight = * reinterpret_cast<QPointF *>(bottomRight);
    QRectF * ptr = new QRectF(xtopleft, xbottomRight);
    return reinterpret_cast<void *>(ptr);
}

void * SCWQRectFCtor_3(void * topleft, void * bottomRight)
{
    QPointF & xtopleft = * reinterpret_cast<QPointF *>(topleft);
    QPointF & xbottomRight = * reinterpret_cast<QPointF *>(bottomRight);
    SCQRectF * ptr = new SCQRectF(xtopleft, xbottomRight);
    return reinterpret_cast<void *>(ptr);
}

void * QWQRectFCtor_4(double  left, double  top, double  width, double  height)
{
    qreal xleft = left;
    qreal xtop = top;
    qreal xwidth = width;
    qreal xheight = height;
    QRectF * ptr = new QRectF(xleft, xtop, xwidth, xheight);
    return reinterpret_cast<void *>(ptr);
}

void * SCWQRectFCtor_4(double  left, double  top, double  width, double  height)
{
    qreal xleft = left;
    qreal xtop = top;
    qreal xwidth = width;
    qreal xheight = height;
    SCQRectF * ptr = new SCQRectF(xleft, xtop, xwidth, xheight);
    return reinterpret_cast<void *>(ptr);
}

void * QWQRectFCtor_5(void * rect)
{
    QRect & xrect = * reinterpret_cast<QRect *>(rect);
    QRectF * ptr = new QRectF(xrect);
    return reinterpret_cast<void *>(ptr);
}

void * SCWQRectFCtor_5(void * rect)
{
    QRect & xrect = * reinterpret_cast<QRect *>(rect);
    SCQRectF * ptr = new SCQRectF(xrect);
    return reinterpret_cast<void *>(ptr);
}

int8_t QWQRectFisNull(void * obj)
{
    QRectF * ptr = reinterpret_cast<QRectF *>(obj);
    bool retVal = ptr->isNull();
    return retVal;
}

int8_t QWQRectFisEmpty(void * obj)
{
    QRectF * ptr = reinterpret_cast<QRectF *>(obj);
    bool retVal = ptr->isEmpty();
    return retVal;
}

int8_t QWQRectFisValid(void * obj)
{
    QRectF * ptr = reinterpret_cast<QRectF *>(obj);
    bool retVal = ptr->isValid();
    return retVal;
}

void * QWQRectFnormalized(void * obj)
{
    QRectF * ptr = reinterpret_cast<QRectF *>(obj);
    QRectF retVal = ptr->normalized();
    QRectF * xxretVal = new QRectF(retVal);
    void * xretVal = reinterpret_cast<void *>(xxretVal);
    return xretVal;
}

double QWQRectFleft(void * obj)
{
    QRectF * ptr = reinterpret_cast<QRectF *>(obj);
    qreal retVal = ptr->left();
    return retVal;
}

double QWQRectFtop(void * obj)
{
    QRectF * ptr = reinterpret_cast<QRectF *>(obj);
    qreal retVal = ptr->top();
    return retVal;
}

double QWQRectFright(void * obj)
{
    QRectF * ptr = reinterpret_cast<QRectF *>(obj);
    qreal retVal = ptr->right();
    return retVal;
}

double QWQRectFbottom(void * obj)
{
    QRectF * ptr = reinterpret_cast<QRectF *>(obj);
    qreal retVal = ptr->bottom();
    return retVal;
}

double QWQRectFx(void * obj)
{
    QRectF * ptr = reinterpret_cast<QRectF *>(obj);
    qreal retVal = ptr->x();
    return retVal;
}

double QWQRectFy(void * obj)
{
    QRectF * ptr = reinterpret_cast<QRectF *>(obj);
    qreal retVal = ptr->y();
    return retVal;
}

void QWQRectFsetX(void * obj, double  pos)
{
    QRectF * ptr = reinterpret_cast<QRectF *>(obj);
    qreal xpos = pos;
    ptr->setX(xpos);
}

void QWQRectFsetY(void * obj, double  pos)
{
    QRectF * ptr = reinterpret_cast<QRectF *>(obj);
    qreal xpos = pos;
    ptr->setY(xpos);
}

void * QWQRectFtopLeft(void * obj)
{
    QRectF * ptr = reinterpret_cast<QRectF *>(obj);
    QPointF retVal = ptr->topLeft();
    QPointF * xxretVal = new QPointF(retVal);
    void * xretVal = reinterpret_cast<void *>(xxretVal);
    return xretVal;
}

void * QWQRectFbottomRight(void * obj)
{
    QRectF * ptr = reinterpret_cast<QRectF *>(obj);
    QPointF retVal = ptr->bottomRight();
    QPointF * xxretVal = new QPointF(retVal);
    void * xretVal = reinterpret_cast<void *>(xxretVal);
    return xretVal;
}

void * QWQRectFtopRight(void * obj)
{
    QRectF * ptr = reinterpret_cast<QRectF *>(obj);
    QPointF retVal = ptr->topRight();
    QPointF * xxretVal = new QPointF(retVal);
    void * xretVal = reinterpret_cast<void *>(xxretVal);
    return xretVal;
}

void * QWQRectFbottomLeft(void * obj)
{
    QRectF * ptr = reinterpret_cast<QRectF *>(obj);
    QPointF retVal = ptr->bottomLeft();
    QPointF * xxretVal = new QPointF(retVal);
    void * xretVal = reinterpret_cast<void *>(xxretVal);
    return xretVal;
}

void * QWQRectFcenter(void * obj)
{
    QRectF * ptr = reinterpret_cast<QRectF *>(obj);
    QPointF retVal = ptr->center();
    QPointF * xxretVal = new QPointF(retVal);
    void * xretVal = reinterpret_cast<void *>(xxretVal);
    return xretVal;
}

void * QWQRectFtransposed(void * obj)
{
    QRectF * ptr = reinterpret_cast<QRectF *>(obj);
    QRectF retVal = ptr->transposed();
    QRectF * xxretVal = new QRectF(retVal);
    void * xretVal = reinterpret_cast<void *>(xxretVal);
    return xretVal;
}

void QWQRectFsetRect(void * obj, double  x, double  y, double  w, double  h)
{
    QRectF * ptr = reinterpret_cast<QRectF *>(obj);
    qreal xx = x;
    qreal xy = y;
    qreal xw = w;
    qreal xh = h;
    ptr->setRect(xx, xy, xw, xh);
}

void * QWQRectFsize(void * obj)
{
    QRectF * ptr = reinterpret_cast<QRectF *>(obj);
    QSizeF retVal = ptr->size();
    QSizeF * xxretVal = new QSizeF(retVal);
    void * xretVal = reinterpret_cast<void *>(xxretVal);
    return xretVal;
}

double QWQRectFwidth(void * obj)
{
    QRectF * ptr = reinterpret_cast<QRectF *>(obj);
    qreal retVal = ptr->width();
    return retVal;
}

double QWQRectFheight(void * obj)
{
    QRectF * ptr = reinterpret_cast<QRectF *>(obj);
    qreal retVal = ptr->height();
    return retVal;
}

void QWQRectFsetWidth(void * obj, double  w)
{
    QRectF * ptr = reinterpret_cast<QRectF *>(obj);
    qreal xw = w;
    ptr->setWidth(xw);
}

void QWQRectFsetHeight(void * obj, double  h)
{
    QRectF * ptr = reinterpret_cast<QRectF *>(obj);
    qreal xh = h;
    ptr->setHeight(xh);
}

void QWQRectFsetSize(void * obj, void * s)
{
    QRectF * ptr = reinterpret_cast<QRectF *>(obj);
    QSizeF & xs = * reinterpret_cast<QSizeF *>(s);
    ptr->setSize(xs);
}

void * QWQRectFtoRect(void * obj)
{
    QRectF * ptr = reinterpret_cast<QRectF *>(obj);
    QRect retVal = ptr->toRect();
    QRect * xxretVal = new QRect(retVal);
    void * xretVal = reinterpret_cast<void *>(xxretVal);
    return xretVal;
}

void * QWQRectFtoAlignedRect(void * obj)
{
    QRectF * ptr = reinterpret_cast<QRectF *>(obj);
    QRect retVal = ptr->toAlignedRect();
    QRect * xxretVal = new QRect(retVal);
    void * xretVal = reinterpret_cast<void *>(xxretVal);
    return xretVal;
}

void QWvalidateCB_QRectF(void *obj, int32_t objId, char *methodName)
{
    SCQRectF * ptr = reinterpret_cast<SCQRectF *>(obj);

    ptr->validateEvent(objId, methodName);

}
void QWQRectFDtor(void * obj)
{
    QRectF * ptr = reinterpret_cast<QRectF *>(obj);
    delete ptr;
}

void SCWQRectFDtor(void * obj)
{
    QRectF * ptr = reinterpret_cast<QRectF *>(obj);
    delete ptr;
}

