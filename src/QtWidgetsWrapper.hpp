
// 
// This file has been automatically generated by RaQt_maker V0.0.7.
// To modify and regenerate it, see the source code available here: 
//         https://github.com/yguillemot/RaQt_maker
// 



#include <QtWidgets>

#include <iostream>
#include <string.h>

#include "QtWidgetsWrapper.h"


extern void (*slotCallback)(int objId, char *slotName);
extern void (*slotCallbackInt)(int objId, char *slotName, STD_INT i);
extern void (*slotCallbackInt2)(int objId, char *slotName, STD_INT i1, STD_INT i2);
extern void (*slotCallbackStr)(int objId, char *slotName, char *s);
extern void (*slotCallbackIntStr)(int objId, char *slotName, STD_INT i, char *s);
extern void (*slotCallbackBool)(int objId, char *slotName, uchar b);
extern void (*slotCallbackQSize)(int objId, char *slotName, void *p);
extern void (*slotCallbackPointer)(int objId, char *slotName, void *p);

extern void (*callback)(int objId, const char *slotName);
extern int (*callbackIntReturnsInt)(int objId, const char *slotName, int arg1);
extern void (*callbackQCloseEvent)(int objId, const char *slotName, QCloseEvent* event);
extern void (*callbackQEvent)(int objId, const char *slotName, QEvent* event);
extern bool (*callbackQEventReturnsBool)(int objId, const char *slotName, QEvent* event);
extern void (*callbackQGraphicsSceneMouseEvent)(int objId, const char *slotName, QGraphicsSceneMouseEvent* event);
extern void (*callbackQKeyEvent)(int objId, const char *slotName, QKeyEvent* event);
extern void (*callbackQMouseEvent)(int objId, const char *slotName, QMouseEvent* event);
extern bool (*callbackQObjectQEventReturnsBool)(int objId, const char *slotName, QObject* watched, QEvent* event);
extern void (*callbackQPaintEvent)(int objId, const char *slotName, QPaintEvent* event);
extern void (*callbackQPainterQRectF)(int objId, const char *slotName, QPainter* painter, const QRectF& rect);
extern bool (*callbackQPointFReturnsBool)(int objId, const char *slotName, const QPointF& point);
extern void (*callbackQResizeEvent)(int objId, const char *slotName, QResizeEvent* event);
extern void (*callbackQTimerEvent)(int objId, const char *slotName, QTimerEvent* event);
extern bool (*callbackReturnsBool)(int objId, const char *slotName);
extern QRectF (*callbackReturnsQRectF)(int objId, const char *slotName);


extern void (*slotCallbackComplexSig)(int32_t objId, char *slotName, uint32_t dataId);


//     TODO TODO TODO
//     Structure a utiliser comme valeur dans la map signalDict
struct QtSignal {
    QtSignal(QString a_signalName, void * a_pcallemit) :
        signalName(a_signalName),
        pcallemit(a_pcallemit)
    { }

    QString signalName;
    void * pcallemit;

    void dump() {
        std::cout << signalName.toLocal8Bit().data() << " "
                  << pcallemit;
    }
};




class QWConnectorE : public QObject
{
 Q_OBJECT

public:
    QWConnectorE(int objId, char * signalName, char * signalSig);

    ~QWConnectorE() {
    }

    void emit_QWSignal() { emit QWSignal(); }
    void emit_QWSignal(int val)
    {
//         std::cout << "emit_QWSignal(int: " << val << ")\n";
        emit QWSignal(val);
    }
    void emit_QWSignal(bool b)
    {
//         std::cout << "this = " << this << " emit_QWSignal(bool: " << b << ")\n";
        emit QWSignal(b);
    }
    void emit_QWSignal(const QString str)
    {
//         std::cout << "this = " << this << " emit_QWSignal(str: \""
//                   << str.toLocal8Bit().data() << "\")\n";
        emit QWSignal(str);
    }
    void emit_QWLocalToLocalSignal(int dataId)
        { emit QWLocalToLocalSignal(dataId); }

signals:
    void QWSignal();
    void QWSignal(int);
    void QWSignal(bool b);
    void QWSignal(const QString &str);
    void QWLocalToLocalSignal(int dataId);

private:
    int m_objId;
    QString m_signalName;
    QString m_signalSig;
};



class QWConnectorR : public QObject
{
 Q_OBJECT

public:
    QWConnectorR(int objId, char * slotName, char * slotSig);

    ~QWConnectorR() {
    }


public slots:
    void QWSlot();
    void QWSlot(int val);
    void QWSlot(bool b);
    void QWSlot(const QString str);
    void QWSlot(const QSize &size);
    void QWLocalToLocalSlot(int dataId);

private:
    int m_objId;
    QString m_slotName;
    QString m_slotSig;
};



class CallbackValidator
{

public:
    CallbackValidator() :
                m_objId(0)        ,
        m_boundingRect(false)        ,
        m_closeEvent(false)        ,
        m_contains(false)        ,
        m_customEvent(false)        ,
        m_drawBackground(false)        ,
        m_drawForeground(false)        ,
        m_enterEvent(false)        ,
        m_event(false)        ,
        m_eventFilter(false)        ,
        m_hasHeightForWidth(false)        ,
        m_heightForWidth(false)        ,
        m_keyPressEvent(false)        ,
        m_keyReleaseEvent(false)        ,
        m_leaveEvent(false)        ,
        m_mouseDoubleClickEvent(false)        ,
        m_mouseMoveEvent(false)        ,
        m_mousePressEvent(false)        ,
        m_mouseReleaseEvent(false)        ,
        m_nextCheckState(false)        ,
        m_paintEvent(false)        ,
        m_resizeEvent(false)        ,
        m_timerEvent(false)

    {
//         std::cout << "############## EVENTVALIDATOR CTOR ##############\n";
//
//         std::cout << "m_objId = " << m_objId << "\n";
//         std::cout << "m_mouseMoveEvent = " << m_mouseMoveEvent << "\n";
//         std::cout << "m_enterEvent = " << m_enterEvent << "\n";
//         std::cout << "m_leaveEvent = " << m_leaveEvent << "\n";
//         std::cout << "m_rakuMouseMoveHandler = " << m_rakuMouseMoveHandler.toLocal8Bit().data() << "\n";
//         std::cout << "m_rakuEnterHandler = " << m_rakuEnterHandler.toLocal8Bit().data() << "\n";
//         std::cout << "m_rakuLeaveHandler = " << m_rakuLeaveHandler.toLocal8Bit().data() << "\n";
//         std::cout << "\n";
    }

    ~CallbackValidator() { }

    void validateEvent(int32_t objId, char * methodName)
    {
//         std::cout << "validateEvent eventType=" << eventType
//             << "  objId=" << objId << "  methodName=" << methodName << "\n";
//
//         std::cout << "m_objId = " << m_objId << "\n";
//         std::cout << "m_mouseMoveEvent = " << m_mouseMoveEvent << "\n";
//         std::cout << "m_enterEvent = " << m_enterEvent << "\n";
//         std::cout << "m_leaveEvent = " << m_leaveEvent << "\n";
//         std::cout << "m_rakuMouseMoveHandler = " << m_rakuMouseMoveHandler.toLocal8Bit().data() << "\n";
//         std::cout << "m_rakuEnterHandler = " << m_rakuEnterHandler.toLocal8Bit().data() << "\n";
//         std::cout << "m_rakuLeaveHandler = " << m_rakuLeaveHandler.toLocal8Bit().data() << "\n";
//         std::cout << "\n";

        m_objId = objId;
        QString meth = QString(methodName);


    if (meth == QString("boundingRect")) {
        m_boundingRect = true;
    }
    if (meth == QString("closeEvent")) {
        m_closeEvent = true;
    }
    if (meth == QString("contains")) {
        m_contains = true;
    }
    if (meth == QString("customEvent")) {
        m_customEvent = true;
    }
    if (meth == QString("drawBackground")) {
        m_drawBackground = true;
    }
    if (meth == QString("drawForeground")) {
        m_drawForeground = true;
    }
    if (meth == QString("enterEvent")) {
        m_enterEvent = true;
    }
    if (meth == QString("event")) {
        m_event = true;
    }
    if (meth == QString("eventFilter")) {
        m_eventFilter = true;
    }
    if (meth == QString("hasHeightForWidth")) {
        m_hasHeightForWidth = true;
    }
    if (meth == QString("heightForWidth")) {
        m_heightForWidth = true;
    }
    if (meth == QString("keyPressEvent")) {
        m_keyPressEvent = true;
    }
    if (meth == QString("keyReleaseEvent")) {
        m_keyReleaseEvent = true;
    }
    if (meth == QString("leaveEvent")) {
        m_leaveEvent = true;
    }
    if (meth == QString("mouseDoubleClickEvent")) {
        m_mouseDoubleClickEvent = true;
    }
    if (meth == QString("mouseMoveEvent")) {
        m_mouseMoveEvent = true;
    }
    if (meth == QString("mousePressEvent")) {
        m_mousePressEvent = true;
    }
    if (meth == QString("mouseReleaseEvent")) {
        m_mouseReleaseEvent = true;
    }
    if (meth == QString("nextCheckState")) {
        m_nextCheckState = true;
    }
    if (meth == QString("paintEvent")) {
        m_paintEvent = true;
    }
    if (meth == QString("resizeEvent")) {
        m_resizeEvent = true;
    }
    if (meth == QString("timerEvent")) {
        m_timerEvent = true;
    }


//         std::cout << "m_objId = " << m_objId << "\n";
//         std::cout << "m_mouseMoveEvent = " << m_mouseMoveEvent << "\n";
//         std::cout << "m_enterEvent = " << m_enterEvent << "\n";
//         std::cout << "m_leaveEvent = " << m_leaveEvent << "\n";
//         std::cout << "m_rakuMouseMoveHandler = " << m_rakuMouseMoveHandler.toLocal8Bit().data() << "\n";
//         std::cout << "m_rakuEnterHandler = " << m_rakuEnterHandler.toLocal8Bit().data() << "\n";
//         std::cout << "m_rakuLeaveHandler = " << m_rakuLeaveHandler.toLocal8Bit().data() << "\n";
//
//         std::cout << "validateEvent : Fin\n";
    }

    // Raku object Id
    int32_t m_objId;

    // Validate the callback
        bool m_boundingRect;
        bool m_closeEvent;
        bool m_contains;
        bool m_customEvent;
        bool m_drawBackground;
        bool m_drawForeground;
        bool m_enterEvent;
        bool m_event;
        bool m_eventFilter;
        bool m_hasHeightForWidth;
        bool m_heightForWidth;
        bool m_keyPressEvent;
        bool m_keyReleaseEvent;
        bool m_leaveEvent;
        bool m_mouseDoubleClickEvent;
        bool m_mouseMoveEvent;
        bool m_mousePressEvent;
        bool m_mouseReleaseEvent;
        bool m_nextCheckState;
        bool m_paintEvent;
        bool m_resizeEvent;
        bool m_timerEvent;


    // Raku name of the method used as callback
    QString m_rakuMouseMoveHandler;
    QString m_rakuEnterHandler;
    QString m_rakuLeaveHandler;
};








