
// 
// This file has been automatically generated by RaQt_maker V0.0.5.
// To modify and regenerate it, see the source code available here: 
//         https://github.com/yguillemot/RaQt_maker
// 



#include <QtWidgets>

#include <iostream>
#include <string.h>

#include "QtWidgetsWrapper.h"


extern void (*slotCallback)(int objId, char *slotName);
extern void (*slotCallbackInt)(int objId, char *slotName, STD_INT i);
extern void (*slotCallbackInt2)(int objId, char *slotName, STD_INT i1, STD_INT i2);
extern void (*slotCallbackStr)(int objId, char *slotName, char *s);
extern void (*slotCallbackIntStr)(int objId, char *slotName, STD_INT i, char *s);
extern void (*slotCallbackBool)(int objId, char *slotName, uchar b);
extern void (*slotCallbackPointer)(int objId, char *slotName, void *p);

//BEGIN_INSERTION_HERE
//VIRTUAL_METHODS_CALLBACKS_PROTOTYPES
extern void (*slotCallbackQCloseEvent)(int objId, const char *slotName, QCloseEvent* event);
extern void (*slotCallbackQEvent)(int objId, const char *slotName, QEvent* event);
extern void (*slotCallbackQMouseEvent)(int objId, const char *slotName, QMouseEvent* event);
extern void (*slotCallbackQPaintEvent)(int objId, const char *slotName, QPaintEvent* event);
extern void (*slotCallbackQResizeEvent)(int objId, const char *slotName, QResizeEvent* event);
//END_INSERTION_HERE


extern void (*slotCallbackComplexSig)(int32_t objId, char *slotName, uint32_t dataId);


//     TODO TODO TODO
//     Structure a utiliser comme valeur dans la map signalDict
struct QtSignal {
    QtSignal(QString a_signalName, void * a_pcallemit) :
        signalName(a_signalName),
        pcallemit(a_pcallemit)
    { }

    QString signalName;
    void * pcallemit;

    void dump() {
        std::cout << signalName.toLocal8Bit().data() << " "
                  << pcallemit;
    }
};




class QWConnectorE : public QObject
{
 Q_OBJECT

public:
    QWConnectorE(int objId, char * signalName, char * signalSig);

    ~QWConnectorE() {
    }

    void emit_QWSignal() { emit QWSignal(); }
    void emit_QWSignal(int val)
    {
//         std::cout << "emit_QWSignal(int: " << val << ")\n";
        emit QWSignal(val);
    }
    void emit_QWSignal(bool b)
    {
//         std::cout << "this = " << this << " emit_QWSignal(bool: " << b << ")\n";
        emit QWSignal(b);
    }
    void emit_QWSignal(const QString str)
    {
//         std::cout << "this = " << this << " emit_QWSignal(str: \""
//                   << str.toLocal8Bit().data() << "\")\n";
        emit QWSignal(str);
    }
    void emit_QWLocalToLocalSignal(int dataId)
        { emit QWLocalToLocalSignal(dataId); }

signals:
    void QWSignal();
    void QWSignal(int);
    void QWSignal(bool b);
    void QWSignal(const QString &str);
    void QWLocalToLocalSignal(int dataId);

private:
    int m_objId;
    QString m_signalName;
    QString m_signalSig;
};



class QWConnectorR : public QObject
{
 Q_OBJECT

public:
    QWConnectorR(int objId, char * slotName, char * slotSig);

    ~QWConnectorR() {
    }


public slots:
    void QWSlot();
    void QWSlot(int val);
    void QWSlot(bool b);
    void QWSlot(const QString str);
    void QWLocalToLocalSlot(int dataId);

private:
    int m_objId;
    QString m_slotName;
    QString m_slotSig;
};



class CallbackValidator
{

public:
    CallbackValidator() :
        //BEGIN_INSERTION_HERE
        //VALIDATOR_INIT
                m_objId(0)        ,
        m_closeEvent(false)        ,
        m_enterEvent(false)        ,
        m_leaveEvent(false)        ,
        m_mouseMoveEvent(false)        ,
        m_mousePressEvent(false)        ,
        m_mouseReleaseEvent(false)        ,
        m_paintEvent(false)        ,
        m_resizeEvent(false)//END_INSERTION_HERE

    {
//         std::cout << "############## EVENTVALIDATOR CTOR ##############\n";
//
//         std::cout << "m_objId = " << m_objId << "\n";
//         std::cout << "m_mouseMoveEvent = " << m_mouseMoveEvent << "\n";
//         std::cout << "m_enterEvent = " << m_enterEvent << "\n";
//         std::cout << "m_leaveEvent = " << m_leaveEvent << "\n";
//         std::cout << "m_rakuMouseMoveHandler = " << m_rakuMouseMoveHandler.toLocal8Bit().data() << "\n";
//         std::cout << "m_rakuEnterHandler = " << m_rakuEnterHandler.toLocal8Bit().data() << "\n";
//         std::cout << "m_rakuLeaveHandler = " << m_rakuLeaveHandler.toLocal8Bit().data() << "\n";
//         std::cout << "\n";
    }

    ~CallbackValidator() { }

    void validateEvent(int32_t objId, char * methodName)
    {
//         std::cout << "validateEvent eventType=" << eventType
//             << "  objId=" << objId << "  methodName=" << methodName << "\n";
//
//         std::cout << "m_objId = " << m_objId << "\n";
//         std::cout << "m_mouseMoveEvent = " << m_mouseMoveEvent << "\n";
//         std::cout << "m_enterEvent = " << m_enterEvent << "\n";
//         std::cout << "m_leaveEvent = " << m_leaveEvent << "\n";
//         std::cout << "m_rakuMouseMoveHandler = " << m_rakuMouseMoveHandler.toLocal8Bit().data() << "\n";
//         std::cout << "m_rakuEnterHandler = " << m_rakuEnterHandler.toLocal8Bit().data() << "\n";
//         std::cout << "m_rakuLeaveHandler = " << m_rakuLeaveHandler.toLocal8Bit().data() << "\n";
//         std::cout << "\n";

        m_objId = objId;
        QString meth = QString(methodName);


//BEGIN_INSERTION_HERE
//VALIDATOR_SWITCH
    if (meth == QString("closeEvent")) {
        m_closeEvent = true;
    }
    if (meth == QString("enterEvent")) {
        m_enterEvent = true;
    }
    if (meth == QString("leaveEvent")) {
        m_leaveEvent = true;
    }
    if (meth == QString("mouseMoveEvent")) {
        m_mouseMoveEvent = true;
    }
    if (meth == QString("mousePressEvent")) {
        m_mousePressEvent = true;
    }
    if (meth == QString("mouseReleaseEvent")) {
        m_mouseReleaseEvent = true;
    }
    if (meth == QString("paintEvent")) {
        m_paintEvent = true;
    }
    if (meth == QString("resizeEvent")) {
        m_resizeEvent = true;
    }
//END_INSERTION_HERE


//         std::cout << "m_objId = " << m_objId << "\n";
//         std::cout << "m_mouseMoveEvent = " << m_mouseMoveEvent << "\n";
//         std::cout << "m_enterEvent = " << m_enterEvent << "\n";
//         std::cout << "m_leaveEvent = " << m_leaveEvent << "\n";
//         std::cout << "m_rakuMouseMoveHandler = " << m_rakuMouseMoveHandler.toLocal8Bit().data() << "\n";
//         std::cout << "m_rakuEnterHandler = " << m_rakuEnterHandler.toLocal8Bit().data() << "\n";
//         std::cout << "m_rakuLeaveHandler = " << m_rakuLeaveHandler.toLocal8Bit().data() << "\n";
//
//         std::cout << "validateEvent : Fin\n";
    }

    // Raku object Id
    int32_t m_objId;

    // Validate the callback
    //BEGIN_INSERTION_HERE
    //VALIDATOR_DECLARATION
        bool m_closeEvent;
        bool m_enterEvent;
        bool m_leaveEvent;
        bool m_mouseMoveEvent;
        bool m_mousePressEvent;
        bool m_mouseReleaseEvent;
        bool m_paintEvent;
        bool m_resizeEvent;
    //END_INSERTION_HERE


    // Raku name of the method used as callback
    QString m_rakuMouseMoveHandler;
    QString m_rakuEnterHandler;
    QString m_rakuLeaveHandler;
};








