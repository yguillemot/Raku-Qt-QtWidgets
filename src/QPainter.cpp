
// 
// This file has been automatically generated by RaQt_maker V0.0.3.
// To modify and regenerate it, see the source code available here: 
//         https://github.com/yguillemot/RaQt_maker
// 

#include "QPainter.h"

void * QWQPainterCtor_1()
{
    QPainter * ptr = new QPainter();
    return reinterpret_cast<void *>(ptr);
}


void * QWQPainterCtor_QWidget(void * arg1)
{
    QWidget * xarg1 = reinterpret_cast<QWidget *>(arg1);
    QPainter * ptr = new QPainter(xarg1);
    return reinterpret_cast<void *>(ptr);
}

void * QWQPainterCtor_QImage(void * arg1)
{
    QImage * xarg1 = reinterpret_cast<QImage *>(arg1);
    QPainter * ptr = new QPainter(xarg1);
    return reinterpret_cast<void *>(ptr);
}

int8_t QWQPainterbegin_null(void * obj)
{
    QPainter * ptr = reinterpret_cast<QPainter *>(obj);
    bool  retVal = ptr->begin(nullptr);
    return retVal;
}

int8_t QWQPainterbegin_QWidget(void * obj, void * arg1)
{
    QPainter * ptr = reinterpret_cast<QPainter *>(obj);
    QPaintDevice * xarg1 = reinterpret_cast<QWidget *>(arg1);
    bool  retVal = ptr->begin(xarg1);
    return retVal;
}

int8_t QWQPainterbegin_QImage(void * obj, void * arg1)
{
    QPainter * ptr = reinterpret_cast<QPainter *>(obj);
    QPaintDevice * xarg1 = reinterpret_cast<QImage *>(arg1);
    bool  retVal = ptr->begin(xarg1);
    return retVal;
}
int8_t QWQPainterend(void * obj)
{
    QPainter * ptr = reinterpret_cast<QPainter *>(obj);
     bool  retVal = ptr->end();
    return retVal;
}

void QWQPaintersetPen_1(void * obj, void * color)
{
    QPainter * ptr = reinterpret_cast<QPainter *>(obj);
    QColor & xcolor = * reinterpret_cast<QColor *>(color);
    ptr->setPen(xcolor);
}

void QWQPaintersetPen_2(void * obj, void * pen)
{
    QPainter * ptr = reinterpret_cast<QPainter *>(obj);
    QPen & xpen = * reinterpret_cast<QPen *>(pen);
    ptr->setPen(xpen);
}

void QWQPaintersetPen_3(void * obj, int  style)
{
    QPainter * ptr = reinterpret_cast<QPainter *>(obj);
    Qt::PenStyle xstyle = static_cast<Qt::PenStyle>(style);
    ptr->setPen(xstyle);
}

void QWQPaintersetBrush_1(void * obj, void * brush)
{
    QPainter * ptr = reinterpret_cast<QPainter *>(obj);
    QBrush & xbrush = * reinterpret_cast<QBrush *>(brush);
    ptr->setBrush(xbrush);
}

void QWQPaintersave(void * obj)
{
    QPainter * ptr = reinterpret_cast<QPainter *>(obj);
    ptr->save();
}

void QWQPainterrestore(void * obj)
{
    QPainter * ptr = reinterpret_cast<QPainter *>(obj);
    ptr->restore();
}

void QWQPainterdrawLine_3(void * obj, int32_t  x1, int32_t  y1, int32_t  x2, int32_t  y2)
{
    QPainter * ptr = reinterpret_cast<QPainter *>(obj);
    int xx1 = x1;
    int xy1 = y1;
    int xx2 = x2;
    int xy2 = y2;
    ptr->drawLine(xx1, xy1, xx2, xy2);
}

void QWQPainterdrawRect_2(void * obj, int32_t  x1, int32_t  y1, int32_t  w, int32_t  h)
{
    QPainter * ptr = reinterpret_cast<QPainter *>(obj);
    int xx1 = x1;
    int xy1 = y1;
    int xw = w;
    int xh = h;
    ptr->drawRect(xx1, xy1, xw, xh);
}

void QWQPainterdrawEllipse_3(void * obj, int32_t  x, int32_t  y, int32_t  w, int32_t  h)
{
    QPainter * ptr = reinterpret_cast<QPainter *>(obj);
    int xx = x;
    int xy = y;
    int xw = w;
    int xh = h;
    ptr->drawEllipse(xx, xy, xw, xh);
}

void QWQPainterDtor(void * obj)
{
    QPainter * ptr = reinterpret_cast<QPainter *>(obj);
    delete ptr;
}

