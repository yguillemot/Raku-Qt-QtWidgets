
// 
// This file has been automatically generated by RaQt_maker V0.0.7.
// To modify and regenerate it, see the source code available here: 
//         https://github.com/yguillemot/RaQt_maker
// 

#include "QAbstractSlider.hpp"

int QWQAbstractSliderorientation(void * obj)
{
    QAbstractSlider * ptr = reinterpret_cast<QAbstractSlider *>(obj);
    Qt::Orientation retVal = ptr->orientation();
    return retVal;
}

void QWQAbstractSlidersetMinimum(void * obj, int32_t  arg1)
{
    QAbstractSlider * ptr = reinterpret_cast<QAbstractSlider *>(obj);
    int xarg1 = arg1;
    ptr->setMinimum(xarg1);
}

int32_t QWQAbstractSliderminimum(void * obj)
{
    QAbstractSlider * ptr = reinterpret_cast<QAbstractSlider *>(obj);
    int retVal = ptr->minimum();
    return retVal;
}

void QWQAbstractSlidersetMaximum(void * obj, int32_t  arg1)
{
    QAbstractSlider * ptr = reinterpret_cast<QAbstractSlider *>(obj);
    int xarg1 = arg1;
    ptr->setMaximum(xarg1);
}

int32_t QWQAbstractSlidermaximum(void * obj)
{
    QAbstractSlider * ptr = reinterpret_cast<QAbstractSlider *>(obj);
    int retVal = ptr->maximum();
    return retVal;
}

void QWQAbstractSlidersetSingleStep(void * obj, int32_t  arg1)
{
    QAbstractSlider * ptr = reinterpret_cast<QAbstractSlider *>(obj);
    int xarg1 = arg1;
    ptr->setSingleStep(xarg1);
}

int32_t QWQAbstractSlidersingleStep(void * obj)
{
    QAbstractSlider * ptr = reinterpret_cast<QAbstractSlider *>(obj);
    int retVal = ptr->singleStep();
    return retVal;
}

void QWQAbstractSlidersetPageStep(void * obj, int32_t  arg1)
{
    QAbstractSlider * ptr = reinterpret_cast<QAbstractSlider *>(obj);
    int xarg1 = arg1;
    ptr->setPageStep(xarg1);
}

int32_t QWQAbstractSliderpageStep(void * obj)
{
    QAbstractSlider * ptr = reinterpret_cast<QAbstractSlider *>(obj);
    int retVal = ptr->pageStep();
    return retVal;
}

void QWQAbstractSlidersetTracking(void * obj, int8_t  enable)
{
    QAbstractSlider * ptr = reinterpret_cast<QAbstractSlider *>(obj);
    bool xenable = enable;
    ptr->setTracking(xenable);
}

int8_t QWQAbstractSliderhasTracking(void * obj)
{
    QAbstractSlider * ptr = reinterpret_cast<QAbstractSlider *>(obj);
    bool retVal = ptr->hasTracking();
    return retVal;
}

void QWQAbstractSlidersetSliderDown(void * obj, int8_t  arg1)
{
    QAbstractSlider * ptr = reinterpret_cast<QAbstractSlider *>(obj);
    bool xarg1 = arg1;
    ptr->setSliderDown(xarg1);
}

void QWQAbstractSlidersetSliderPosition(void * obj, int32_t  arg1)
{
    QAbstractSlider * ptr = reinterpret_cast<QAbstractSlider *>(obj);
    int xarg1 = arg1;
    ptr->setSliderPosition(xarg1);
}

int32_t QWQAbstractSlidersliderPosition(void * obj)
{
    QAbstractSlider * ptr = reinterpret_cast<QAbstractSlider *>(obj);
    int retVal = ptr->sliderPosition();
    return retVal;
}

void QWQAbstractSlidersetInvertedAppearance(void * obj, int8_t  arg1)
{
    QAbstractSlider * ptr = reinterpret_cast<QAbstractSlider *>(obj);
    bool xarg1 = arg1;
    ptr->setInvertedAppearance(xarg1);
}

int8_t QWQAbstractSliderinvertedAppearance(void * obj)
{
    QAbstractSlider * ptr = reinterpret_cast<QAbstractSlider *>(obj);
    bool retVal = ptr->invertedAppearance();
    return retVal;
}

void QWQAbstractSlidersetInvertedControls(void * obj, int8_t  arg1)
{
    QAbstractSlider * ptr = reinterpret_cast<QAbstractSlider *>(obj);
    bool xarg1 = arg1;
    ptr->setInvertedControls(xarg1);
}

int8_t QWQAbstractSliderinvertedControls(void * obj)
{
    QAbstractSlider * ptr = reinterpret_cast<QAbstractSlider *>(obj);
    bool retVal = ptr->invertedControls();
    return retVal;
}

int32_t QWQAbstractSlidervalue(void * obj)
{
    QAbstractSlider * ptr = reinterpret_cast<QAbstractSlider *>(obj);
    int retVal = ptr->value();
    return retVal;
}

void QWQAbstractSlidersetValue(void * obj, int32_t  arg1)
{
    QAbstractSlider * ptr = reinterpret_cast<QAbstractSlider *>(obj);
    int xarg1 = arg1;
    ptr->setValue(xarg1);
}

void QWQAbstractSlidersetOrientation(void * obj, int  arg1)
{
    QAbstractSlider * ptr = reinterpret_cast<QAbstractSlider *>(obj);
    Qt::Orientation xarg1 = static_cast<Qt::Orientation>(arg1);
    ptr->setOrientation(xarg1);
}

void QWQAbstractSlidersetRange(void * obj, int32_t  min, int32_t  max)
{
    QAbstractSlider * ptr = reinterpret_cast<QAbstractSlider *>(obj);
    int xmin = min;
    int xmax = max;
    ptr->setRange(xmin, xmax);
}

