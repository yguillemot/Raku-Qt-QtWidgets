
// 
// This file has been automatically generated by RaQt_maker V0.0.7.
// To modify and regenerate it, see the source code available here: 
//         https://github.com/yguillemot/RaQt_maker
// 

#include "QBrush.hpp"

void * QWQBrushCtor_1()
{
    QBrush * ptr = new QBrush();
    return reinterpret_cast<void *>(ptr);
}

void * SCWQBrushCtor_1()
{
    SCQBrush * ptr = new SCQBrush();
    return reinterpret_cast<void *>(ptr);
}

void * QWQBrushCtor_2(int  bs)
{
    Qt::BrushStyle xbs = static_cast<Qt::BrushStyle>(bs);
    QBrush * ptr = new QBrush(xbs);
    return reinterpret_cast<void *>(ptr);
}

void * SCWQBrushCtor_2(int  bs)
{
    Qt::BrushStyle xbs = static_cast<Qt::BrushStyle>(bs);
    SCQBrush * ptr = new SCQBrush(xbs);
    return reinterpret_cast<void *>(ptr);
}

void * QWQBrushCtor_3(void * color, int  bs)
{
    QColor & xcolor = * reinterpret_cast<QColor *>(color);
    Qt::BrushStyle xbs = static_cast<Qt::BrushStyle>(bs);
    QBrush * ptr = new QBrush(xcolor, xbs);
    return reinterpret_cast<void *>(ptr);
}

void * SCWQBrushCtor_3(void * color, int  bs)
{
    QColor & xcolor = * reinterpret_cast<QColor *>(color);
    Qt::BrushStyle xbs = static_cast<Qt::BrushStyle>(bs);
    SCQBrush * ptr = new SCQBrush(xcolor, xbs);
    return reinterpret_cast<void *>(ptr);
}

void QWQBrushsetStyle(void * obj, int  arg1)
{
    QBrush * ptr = reinterpret_cast<QBrush *>(obj);
    Qt::BrushStyle xarg1 = static_cast<Qt::BrushStyle>(arg1);
    ptr->setStyle(xarg1);
}

void QWQBrushsetColor_1(void * obj, void * color)
{
    QBrush * ptr = reinterpret_cast<QBrush *>(obj);
    QColor & xcolor = * reinterpret_cast<QColor *>(color);
    ptr->setColor(xcolor);
}

void QWvalidateCB_QBrush(void *obj, int32_t objId, char *methodName)
{
    SCQBrush * ptr = reinterpret_cast<SCQBrush *>(obj);

    ptr->validateEvent(objId, methodName);

}
void QWQBrushDtor(void * obj)
{
    QBrush * ptr = reinterpret_cast<QBrush *>(obj);
    delete ptr;
}

void SCWQBrushDtor(void * obj)
{
    QBrush * ptr = reinterpret_cast<QBrush *>(obj);
    delete ptr;
}

