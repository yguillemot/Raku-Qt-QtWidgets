
// 
// This file has been automatically generated by RaQt_maker V0.0.7.
// To modify and regenerate it, see the source code available here: 
//         https://github.com/yguillemot/RaQt_maker
// 

#include "QMainWindow.hpp"

void * QWQMainWindowCtor(void * parent, int  flags)
{
    QWidget * xparent = reinterpret_cast<QWidget *>(parent);
    Qt::WindowFlags xflags = static_cast<Qt::WindowFlags>(flags);
    QMainWindow * ptr = new QMainWindow(xparent, xflags);
    return reinterpret_cast<void *>(ptr);
}

void * SCWQMainWindowCtor(void * parent, int  flags)
{
    QWidget * xparent = reinterpret_cast<QWidget *>(parent);
    Qt::WindowFlags xflags = static_cast<Qt::WindowFlags>(flags);
    SCQMainWindow * ptr = new SCQMainWindow(xparent, xflags);
    return reinterpret_cast<void *>(ptr);
}

void * QWQMainWindowiconSize(void * obj)
{
    QMainWindow * ptr = reinterpret_cast<QMainWindow *>(obj);
    QSize retVal = ptr->iconSize();
    QSize * xxretVal = new QSize(retVal);
    void * xretVal = reinterpret_cast<void *>(xxretVal);
    return xretVal;
}

void QWQMainWindowsetIconSize(void * obj, void * iconSize)
{
    QMainWindow * ptr = reinterpret_cast<QMainWindow *>(obj);
    QSize & xiconSize = * reinterpret_cast<QSize *>(iconSize);
    ptr->setIconSize(xiconSize);
}

void QWQMainWindowsetDocumentMode(void * obj, int8_t  enabled)
{
    QMainWindow * ptr = reinterpret_cast<QMainWindow *>(obj);
    bool xenabled = enabled;
    ptr->setDocumentMode(xenabled);
}

void * QWQMainWindowmenuBar(void * obj)
{
    QMainWindow * ptr = reinterpret_cast<QMainWindow *>(obj);
    QMenuBar * retVal = ptr->menuBar();
    return retVal;
}

void QWQMainWindowsetMenuBar(void * obj, void * menubar)
{
    QMainWindow * ptr = reinterpret_cast<QMainWindow *>(obj);
    QMenuBar * xmenubar = reinterpret_cast<QMenuBar *>(menubar);
    ptr->setMenuBar(xmenubar);
}

void * QWQMainWindowmenuWidget(void * obj)
{
    QMainWindow * ptr = reinterpret_cast<QMainWindow *>(obj);
    QWidget * retVal = ptr->menuWidget();
    return retVal;
}

void QWQMainWindowsetMenuWidget(void * obj, void * menubar)
{
    QMainWindow * ptr = reinterpret_cast<QMainWindow *>(obj);
    QWidget * xmenubar = reinterpret_cast<QWidget *>(menubar);
    ptr->setMenuWidget(xmenubar);
}

void * QWQMainWindowstatusBar(void * obj)
{
    QMainWindow * ptr = reinterpret_cast<QMainWindow *>(obj);
    QStatusBar * retVal = ptr->statusBar();
    return retVal;
}

void QWQMainWindowsetStatusBar(void * obj, void * statusbar)
{
    QMainWindow * ptr = reinterpret_cast<QMainWindow *>(obj);
    QStatusBar * xstatusbar = reinterpret_cast<QStatusBar *>(statusbar);
    ptr->setStatusBar(xstatusbar);
}

void * QWQMainWindowcentralWidget(void * obj)
{
    QMainWindow * ptr = reinterpret_cast<QMainWindow *>(obj);
    QWidget * retVal = ptr->centralWidget();
    return retVal;
}

void QWQMainWindowsetCentralWidget(void * obj, void * widget)
{
    QMainWindow * ptr = reinterpret_cast<QMainWindow *>(obj);
    QWidget * xwidget = reinterpret_cast<QWidget *>(widget);
    ptr->setCentralWidget(xwidget);
}

void * QWQMainWindowtakeCentralWidget(void * obj)
{
    QMainWindow * ptr = reinterpret_cast<QMainWindow *>(obj);
    QWidget * retVal = ptr->takeCentralWidget();
    return retVal;
}

void QWQMainWindowinsertToolBarBreak(void * obj, void * before)
{
    QMainWindow * ptr = reinterpret_cast<QMainWindow *>(obj);
    QToolBar * xbefore = reinterpret_cast<QToolBar *>(before);
    ptr->insertToolBarBreak(xbefore);
}

void QWQMainWindowaddToolBar_1(void * obj, int  area, void * toolbar)
{
    QMainWindow * ptr = reinterpret_cast<QMainWindow *>(obj);
    Qt::ToolBarArea xarea = static_cast<Qt::ToolBarArea>(area);
    QToolBar * xtoolbar = reinterpret_cast<QToolBar *>(toolbar);
    ptr->addToolBar(xarea, xtoolbar);
}

void QWQMainWindowaddToolBar_2(void * obj, void * toolbar)
{
    QMainWindow * ptr = reinterpret_cast<QMainWindow *>(obj);
    QToolBar * xtoolbar = reinterpret_cast<QToolBar *>(toolbar);
    ptr->addToolBar(xtoolbar);
}

void * QWQMainWindowaddToolBar_3(void * obj, char * title)
{
    QMainWindow * ptr = reinterpret_cast<QMainWindow *>(obj);
    QString xtitle = QString(title);
    QToolBar * retVal = ptr->addToolBar(xtitle);
    return retVal;
}

void QWQMainWindowinsertToolBar(void * obj, void * before, void * toolbar)
{
    QMainWindow * ptr = reinterpret_cast<QMainWindow *>(obj);
    QToolBar * xbefore = reinterpret_cast<QToolBar *>(before);
    QToolBar * xtoolbar = reinterpret_cast<QToolBar *>(toolbar);
    ptr->insertToolBar(xbefore, xtoolbar);
}

void QWQMainWindowremoveToolBar(void * obj, void * toolbar)
{
    QMainWindow * ptr = reinterpret_cast<QMainWindow *>(obj);
    QToolBar * xtoolbar = reinterpret_cast<QToolBar *>(toolbar);
    ptr->removeToolBar(xtoolbar);
}

void QWQMainWindowremoveToolBarBreak(void * obj, void * before)
{
    QMainWindow * ptr = reinterpret_cast<QMainWindow *>(obj);
    QToolBar * xbefore = reinterpret_cast<QToolBar *>(before);
    ptr->removeToolBarBreak(xbefore);
}

int QWQMainWindowtoolBarArea(void * obj, void * toolbar)
{
    QMainWindow * ptr = reinterpret_cast<QMainWindow *>(obj);
    QToolBar * xtoolbar = reinterpret_cast<QToolBar *>(toolbar);
    Qt::ToolBarArea retVal = ptr->toolBarArea(xtoolbar);
    return retVal;
}

int8_t QWQMainWindowtoolBarBreak(void * obj, void * toolbar)
{
    QMainWindow * ptr = reinterpret_cast<QMainWindow *>(obj);
    QToolBar * xtoolbar = reinterpret_cast<QToolBar *>(toolbar);
    bool retVal = ptr->toolBarBreak(xtoolbar);
    return retVal;
}

void QWvalidateCB_QMainWindow(void *obj, int32_t objId, char *methodName)
{
    SCQMainWindow * ptr = reinterpret_cast<SCQMainWindow *>(obj);

    ptr->validateEvent(objId, methodName);

}
void QWQMainWindowDtor(void * obj)
{
    QMainWindow * ptr = reinterpret_cast<QMainWindow *>(obj);
    delete ptr;
}

void SCWQMainWindowDtor(void * obj)
{
    QMainWindow * ptr = reinterpret_cast<QMainWindow *>(obj);
    delete ptr;
}

