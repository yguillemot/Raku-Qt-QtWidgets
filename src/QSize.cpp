
// 
// This file has been automatically generated by RaQt_maker V0.0.7.
// To modify and regenerate it, see the source code available here: 
//         https://github.com/yguillemot/RaQt_maker
// 

#include "QSize.hpp"

void * QWQSizeCtor_1()
{
    QSize * ptr = new QSize();
    return reinterpret_cast<void *>(ptr);
}

void * SCWQSizeCtor_1()
{
    SCQSize * ptr = new SCQSize();
    return reinterpret_cast<void *>(ptr);
}

void * QWQSizeCtor_2(int32_t  w, int32_t  h)
{
    int xw = w;
    int xh = h;
    QSize * ptr = new QSize(xw, xh);
    return reinterpret_cast<void *>(ptr);
}

void * SCWQSizeCtor_2(int32_t  w, int32_t  h)
{
    int xw = w;
    int xh = h;
    SCQSize * ptr = new SCQSize(xw, xh);
    return reinterpret_cast<void *>(ptr);
}

int8_t QWQSizeisNull(void * obj)
{
    QSize * ptr = reinterpret_cast<QSize *>(obj);
    bool retVal = ptr->isNull();
    return retVal;
}

int8_t QWQSizeisEmpty(void * obj)
{
    QSize * ptr = reinterpret_cast<QSize *>(obj);
    bool retVal = ptr->isEmpty();
    return retVal;
}

int8_t QWQSizeisValid(void * obj)
{
    QSize * ptr = reinterpret_cast<QSize *>(obj);
    bool retVal = ptr->isValid();
    return retVal;
}

int32_t QWQSizewidth(void * obj)
{
    QSize * ptr = reinterpret_cast<QSize *>(obj);
    int retVal = ptr->width();
    return retVal;
}

int32_t QWQSizeheight(void * obj)
{
    QSize * ptr = reinterpret_cast<QSize *>(obj);
    int retVal = ptr->height();
    return retVal;
}

void QWQSizesetWidth(void * obj, int32_t  w)
{
    QSize * ptr = reinterpret_cast<QSize *>(obj);
    int xw = w;
    ptr->setWidth(xw);
}

void QWQSizesetHeight(void * obj, int32_t  h)
{
    QSize * ptr = reinterpret_cast<QSize *>(obj);
    int xh = h;
    ptr->setHeight(xh);
}

void * QWQSizeexpandedTo(void * obj, void * arg1)
{
    QSize * ptr = reinterpret_cast<QSize *>(obj);
    QSize & xarg1 = * reinterpret_cast<QSize *>(arg1);
    QSize retVal = ptr->expandedTo(xarg1);
    QSize * xxretVal = new QSize(retVal);
    void * xretVal = reinterpret_cast<void *>(xxretVal);
    return xretVal;
}

void * QWQSizeboundedTo(void * obj, void * arg1)
{
    QSize * ptr = reinterpret_cast<QSize *>(obj);
    QSize & xarg1 = * reinterpret_cast<QSize *>(arg1);
    QSize retVal = ptr->boundedTo(xarg1);
    QSize * xxretVal = new QSize(retVal);
    void * xretVal = reinterpret_cast<void *>(xxretVal);
    return xretVal;
}

void QWvalidateCB_QSize(void *obj, int32_t objId, char *methodName)
{
    SCQSize * ptr = reinterpret_cast<SCQSize *>(obj);

    ptr->validateEvent(objId, methodName);

}
void QWQSizeDtor(void * obj)
{
    QSize * ptr = reinterpret_cast<QSize *>(obj);
    delete ptr;
}

void SCWQSizeDtor(void * obj)
{
    QSize * ptr = reinterpret_cast<QSize *>(obj);
    delete ptr;
}

