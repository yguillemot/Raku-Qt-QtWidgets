
// 
// This file has been automatically generated by RaQt_maker V0.0.7.
// To modify and regenerate it, see the source code available here: 
//         https://github.com/yguillemot/RaQt_maker
// 

#include "QToolBar.hpp"

void * QWQToolBarCtor_1(char * title, void * parent)
{
    QString xtitle = QString(title);
    QWidget * xparent = reinterpret_cast<QWidget *>(parent);
    QToolBar * ptr = new QToolBar(xtitle, xparent);
    return reinterpret_cast<void *>(ptr);
}

void * SCWQToolBarCtor_1(char * title, void * parent)
{
    QString xtitle = QString(title);
    QWidget * xparent = reinterpret_cast<QWidget *>(parent);
    SCQToolBar * ptr = new SCQToolBar(xtitle, xparent);
    return reinterpret_cast<void *>(ptr);
}

void * QWQToolBarCtor_2(void * parent)
{
    QWidget * xparent = reinterpret_cast<QWidget *>(parent);
    QToolBar * ptr = new QToolBar(xparent);
    return reinterpret_cast<void *>(ptr);
}

void * SCWQToolBarCtor_2(void * parent)
{
    QWidget * xparent = reinterpret_cast<QWidget *>(parent);
    SCQToolBar * ptr = new SCQToolBar(xparent);
    return reinterpret_cast<void *>(ptr);
}

void QWQToolBarsetMovable(void * obj, int8_t  movable)
{
    QToolBar * ptr = reinterpret_cast<QToolBar *>(obj);
    bool xmovable = movable;
    ptr->setMovable(xmovable);
}

int8_t QWQToolBarisMovable(void * obj)
{
    QToolBar * ptr = reinterpret_cast<QToolBar *>(obj);
    bool retVal = ptr->isMovable();
    return retVal;
}

void QWQToolBarsetAllowedAreas(void * obj, int  areas)
{
    QToolBar * ptr = reinterpret_cast<QToolBar *>(obj);
    Qt::ToolBarAreas xareas = static_cast<Qt::ToolBarAreas>(areas);
    ptr->setAllowedAreas(xareas);
}

int QWQToolBarorientation(void * obj)
{
    QToolBar * ptr = reinterpret_cast<QToolBar *>(obj);
    Qt::Orientation retVal = ptr->orientation();
    return retVal;
}

void QWQToolBarclear(void * obj)
{
    QToolBar * ptr = reinterpret_cast<QToolBar *>(obj);
    ptr->clear();
}

void * QWQToolBaraddAction_1(void * obj, char * text)
{
    QToolBar * ptr = reinterpret_cast<QToolBar *>(obj);
    QString xtext = QString(text);
    QAction * retVal = ptr->addAction(xtext);
    return retVal;
}

void * QWQToolBaraddSeparator(void * obj)
{
    QToolBar * ptr = reinterpret_cast<QToolBar *>(obj);
    QAction * retVal = ptr->addSeparator();
    return retVal;
}

void * QWQToolBarinsertSeparator(void * obj, void * before)
{
    QToolBar * ptr = reinterpret_cast<QToolBar *>(obj);
    QAction * xbefore = reinterpret_cast<QAction *>(before);
    QAction * retVal = ptr->insertSeparator(xbefore);
    return retVal;
}

void * QWQToolBaraddWidget(void * obj, void * widget)
{
    QToolBar * ptr = reinterpret_cast<QToolBar *>(obj);
    QWidget * xwidget = reinterpret_cast<QWidget *>(widget);
    QAction * retVal = ptr->addWidget(xwidget);
    return retVal;
}

void * QWQToolBarinsertWidget(void * obj, void * before, void * widget)
{
    QToolBar * ptr = reinterpret_cast<QToolBar *>(obj);
    QAction * xbefore = reinterpret_cast<QAction *>(before);
    QWidget * xwidget = reinterpret_cast<QWidget *>(widget);
    QAction * retVal = ptr->insertWidget(xbefore, xwidget);
    return retVal;
}

void * QWQToolBaractionAt_1(void * obj, void * p)
{
    QToolBar * ptr = reinterpret_cast<QToolBar *>(obj);
    QPoint & xp = * reinterpret_cast<QPoint *>(p);
    QAction * retVal = ptr->actionAt(xp);
    return retVal;
}

void * QWQToolBaractionAt_2(void * obj, int32_t  x, int32_t  y)
{
    QToolBar * ptr = reinterpret_cast<QToolBar *>(obj);
    int xx = x;
    int xy = y;
    QAction * retVal = ptr->actionAt(xx, xy);
    return retVal;
}

void * QWQToolBariconSize(void * obj)
{
    QToolBar * ptr = reinterpret_cast<QToolBar *>(obj);
    QSize retVal = ptr->iconSize();
    QSize * xxretVal = new QSize(retVal);
    void * xretVal = reinterpret_cast<void *>(xxretVal);
    return xretVal;
}

void * QWQToolBarwidgetForAction(void * obj, void * action)
{
    QToolBar * ptr = reinterpret_cast<QToolBar *>(obj);
    QAction * xaction = reinterpret_cast<QAction *>(action);
    QWidget * retVal = ptr->widgetForAction(xaction);
    return retVal;
}

int8_t QWQToolBarisFloatable(void * obj)
{
    QToolBar * ptr = reinterpret_cast<QToolBar *>(obj);
    bool retVal = ptr->isFloatable();
    return retVal;
}

void QWQToolBarsetFloatable(void * obj, int8_t  floatable)
{
    QToolBar * ptr = reinterpret_cast<QToolBar *>(obj);
    bool xfloatable = floatable;
    ptr->setFloatable(xfloatable);
}

int8_t QWQToolBarisFloating(void * obj)
{
    QToolBar * ptr = reinterpret_cast<QToolBar *>(obj);
    bool retVal = ptr->isFloating();
    return retVal;
}

void QWQToolBarsetIconSize(void * obj, void * iconSize)
{
    QToolBar * ptr = reinterpret_cast<QToolBar *>(obj);
    QSize & xiconSize = * reinterpret_cast<QSize *>(iconSize);
    ptr->setIconSize(xiconSize);
}

void QWvalidateCB_QToolBar(void *obj, int32_t objId, char *methodName)
{
    SCQToolBar * ptr = reinterpret_cast<SCQToolBar *>(obj);

    ptr->validateEvent(objId, methodName);

}
void QWQToolBarDtor(void * obj)
{
    QToolBar * ptr = reinterpret_cast<QToolBar *>(obj);
    delete ptr;
}

void SCWQToolBarDtor(void * obj)
{
    QToolBar * ptr = reinterpret_cast<QToolBar *>(obj);
    delete ptr;
}

