
// 
// This file has been automatically generated by RaQt_maker V0.0.7.
// To modify and regenerate it, see the source code available here: 
//         https://github.com/yguillemot/RaQt_maker
// 

#include "QMenuBar.hpp"

void * QWQMenuBarCtor(void * parent)
{
    QWidget * xparent = reinterpret_cast<QWidget *>(parent);
    QMenuBar * ptr = new QMenuBar(xparent);
    return reinterpret_cast<void *>(ptr);
}

void * SCWQMenuBarCtor(void * parent)
{
    QWidget * xparent = reinterpret_cast<QWidget *>(parent);
    SCQMenuBar * ptr = new SCQMenuBar(xparent);
    return reinterpret_cast<void *>(ptr);
}

void * QWQMenuBaraddAction_1(void * obj, char * text)
{
    QMenuBar * ptr = reinterpret_cast<QMenuBar *>(obj);
    QString xtext = QString(text);
    QAction * retVal = ptr->addAction(xtext);
    return retVal;
}

void * QWQMenuBaraddMenu_1(void * obj, void * menu)
{
    QMenuBar * ptr = reinterpret_cast<QMenuBar *>(obj);
    QMenu * xmenu = reinterpret_cast<QMenu *>(menu);
    QAction * retVal = ptr->addMenu(xmenu);
    return retVal;
}

void * QWQMenuBaraddMenu_2(void * obj, char * title)
{
    QMenuBar * ptr = reinterpret_cast<QMenuBar *>(obj);
    QString xtitle = QString(title);
    QMenu * retVal = ptr->addMenu(xtitle);
    return retVal;
}

void * QWQMenuBaraddSeparator(void * obj)
{
    QMenuBar * ptr = reinterpret_cast<QMenuBar *>(obj);
    QAction * retVal = ptr->addSeparator();
    return retVal;
}

void * QWQMenuBarinsertSeparator(void * obj, void * before)
{
    QMenuBar * ptr = reinterpret_cast<QMenuBar *>(obj);
    QAction * xbefore = reinterpret_cast<QAction *>(before);
    QAction * retVal = ptr->insertSeparator(xbefore);
    return retVal;
}

void * QWQMenuBarinsertMenu(void * obj, void * before, void * menu)
{
    QMenuBar * ptr = reinterpret_cast<QMenuBar *>(obj);
    QAction * xbefore = reinterpret_cast<QAction *>(before);
    QMenu * xmenu = reinterpret_cast<QMenu *>(menu);
    QAction * retVal = ptr->insertMenu(xbefore, xmenu);
    return retVal;
}

void QWQMenuBarsetActiveAction(void * obj, void * action)
{
    QMenuBar * ptr = reinterpret_cast<QMenuBar *>(obj);
    QAction * xaction = reinterpret_cast<QAction *>(action);
    ptr->setActiveAction(xaction);
}

void QWQMenuBarsetDefaultUp(void * obj, int8_t  arg1)
{
    QMenuBar * ptr = reinterpret_cast<QMenuBar *>(obj);
    bool xarg1 = arg1;
    ptr->setDefaultUp(xarg1);
}

int8_t QWQMenuBarisDefaultUp(void * obj)
{
    QMenuBar * ptr = reinterpret_cast<QMenuBar *>(obj);
    bool retVal = ptr->isDefaultUp();
    return retVal;
}

void * QWQMenuBarsizeHint(void * obj)
{
    QMenuBar * ptr = reinterpret_cast<QMenuBar *>(obj);
    QSize retVal = ptr->sizeHint();
    QSize * xxretVal = new QSize(retVal);
    void * xretVal = reinterpret_cast<void *>(xxretVal);
    return xretVal;
}

void * QWQMenuBarminimumSizeHint(void * obj)
{
    QMenuBar * ptr = reinterpret_cast<QMenuBar *>(obj);
    QSize retVal = ptr->minimumSizeHint();
    QSize * xxretVal = new QSize(retVal);
    void * xretVal = reinterpret_cast<void *>(xxretVal);
    return xretVal;
}

int32_t QWQMenuBarheightForWidth(void * obj, int32_t  arg1)
{
    QMenuBar * ptr = reinterpret_cast<QMenuBar *>(obj);
    int xarg1 = arg1;
    int retVal = ptr->heightForWidth(xarg1);
    return retVal;
}

void * QWQMenuBaractionAt(void * obj, void * arg1)
{
    QMenuBar * ptr = reinterpret_cast<QMenuBar *>(obj);
    QPoint & xarg1 = * reinterpret_cast<QPoint *>(arg1);
    QAction * retVal = ptr->actionAt(xarg1);
    return retVal;
}

void QWQMenuBarsetCornerWidget(void * obj, void * w, int  corner)
{
    QMenuBar * ptr = reinterpret_cast<QMenuBar *>(obj);
    QWidget * xw = reinterpret_cast<QWidget *>(w);
    Qt::Corner xcorner = static_cast<Qt::Corner>(corner);
    ptr->setCornerWidget(xw, xcorner);
}

int8_t QWQMenuBarisNativeMenuBar(void * obj)
{
    QMenuBar * ptr = reinterpret_cast<QMenuBar *>(obj);
    bool retVal = ptr->isNativeMenuBar();
    return retVal;
}

void QWQMenuBarsetNativeMenuBar(void * obj, int8_t  nativeMenuBar)
{
    QMenuBar * ptr = reinterpret_cast<QMenuBar *>(obj);
    bool xnativeMenuBar = nativeMenuBar;
    ptr->setNativeMenuBar(xnativeMenuBar);
}

void QWQMenuBarsetVisible(void * obj, int8_t  visible)
{
    QMenuBar * ptr = reinterpret_cast<QMenuBar *>(obj);
    bool xvisible = visible;
    ptr->setVisible(xvisible);
}

void QWvalidateCB_QMenuBar(void *obj, int32_t objId, char *methodName)
{
    SCQMenuBar * ptr = reinterpret_cast<SCQMenuBar *>(obj);

    ptr->validateEvent(objId, methodName);

}
void QWQMenuBarDtor(void * obj)
{
    QMenuBar * ptr = reinterpret_cast<QMenuBar *>(obj);
    delete ptr;
}

void SCWQMenuBarDtor(void * obj)
{
    QMenuBar * ptr = reinterpret_cast<QMenuBar *>(obj);
    delete ptr;
}

