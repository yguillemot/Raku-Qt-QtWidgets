
# 
# This file has been automatically generated by RaQt_maker V0.0.7.
# To modify and regenerate it, see the source code available here: 
#         https://github.com/yguillemot/RaQt_maker
# 

use NativeCall;
use Qt::QtWidgets:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::QtHelpers:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::QtWrappers:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::QWidget:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::Qt:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::RQAbstractSlider:ver<0.0.7>:auth<zef:yguillemot>:api<2>;



class QAbstractSlider:ver<0.0.7>:auth<zef:yguillemot>:api<2>
    is QWidget
    is QtObject
    does RQAbstractSlider
    is export {

    submethod new(|capture) is hidden-from-backtrace {
        unimplementedCtor("QAbstractSlider");
    }

    method orientation( --> Qt::Orientation)
    {
        my $result = QWQAbstractSliderorientation(self.address);
        my $result1 = Qt::Orientation($result);
        return $result1;
    }

    method setMinimum(Int $arg1)
    {
        QWQAbstractSlidersetMinimum(self.address, $arg1);
    }

    method minimum( --> Int)
    {
        my $result = QWQAbstractSliderminimum(self.address);
        return $result;
    }

    method setMaximum(Int $arg1)
    {
        QWQAbstractSlidersetMaximum(self.address, $arg1);
    }

    method maximum( --> Int)
    {
        my $result = QWQAbstractSlidermaximum(self.address);
        return $result;
    }

    method setSingleStep(Int $arg1)
    {
        QWQAbstractSlidersetSingleStep(self.address, $arg1);
    }

    method singleStep( --> Int)
    {
        my $result = QWQAbstractSlidersingleStep(self.address);
        return $result;
    }

    method setPageStep(Int $arg1)
    {
        QWQAbstractSlidersetPageStep(self.address, $arg1);
    }

    method pageStep( --> Int)
    {
        my $result = QWQAbstractSliderpageStep(self.address);
        return $result;
    }

    method setTracking(Bool $enable)
    {
        my int8 $a1 = $enable.Int;
        QWQAbstractSlidersetTracking(self.address, $a1);
    }

    method hasTracking( --> Bool)
    {
        my $result = QWQAbstractSliderhasTracking(self.address);
        my $result1 = ?$result;
        return $result1;
    }

    method setSliderDown(Bool $arg1)
    {
        my int8 $a1 = $arg1.Int;
        QWQAbstractSlidersetSliderDown(self.address, $a1);
    }

    method setSliderPosition(Int $arg1)
    {
        QWQAbstractSlidersetSliderPosition(self.address, $arg1);
    }

    method sliderPosition( --> Int)
    {
        my $result = QWQAbstractSlidersliderPosition(self.address);
        return $result;
    }

    method setInvertedAppearance(Bool $arg1)
    {
        my int8 $a1 = $arg1.Int;
        QWQAbstractSlidersetInvertedAppearance(self.address, $a1);
    }

    method invertedAppearance( --> Bool)
    {
        my $result = QWQAbstractSliderinvertedAppearance(self.address);
        my $result1 = ?$result;
        return $result1;
    }

    method setInvertedControls(Bool $arg1)
    {
        my int8 $a1 = $arg1.Int;
        QWQAbstractSlidersetInvertedControls(self.address, $a1);
    }

    method invertedControls( --> Bool)
    {
        my $result = QWQAbstractSliderinvertedControls(self.address);
        my $result1 = ?$result;
        return $result1;
    }

    method value( --> Int)
    {
        my $result = QWQAbstractSlidervalue(self.address);
        return $result;
    }

    method setValue(Int $arg1) is QtSlot
    {
        QWQAbstractSlidersetValue(self.address, $arg1);
    }

    method setOrientation(Qt::Orientation $arg1) is QtSlot
    {
        QWQAbstractSlidersetOrientation(self.address, $arg1);
    }

    method setRange(Int $min, Int $max) is QtSlot
    {
        QWQAbstractSlidersetRange(self.address, $min, $max);
    }

    method valueChanged(Int $value)
        is QtSignal { ... }

    method sliderPressed()
        is QtSignal { ... }

    method sliderMoved(Int $position)
        is QtSignal { ... }

    method sliderReleased()
        is QtSignal { ... }

}


sub QWQAbstractSliderorientation(Pointer)
    returns int32 is native(&libwrapper) { * }

sub QWQAbstractSlidersetMinimum(Pointer, int32)
    is native(&libwrapper) { * }

sub QWQAbstractSliderminimum(Pointer)
    returns int32 is native(&libwrapper) { * }

sub QWQAbstractSlidersetMaximum(Pointer, int32)
    is native(&libwrapper) { * }

sub QWQAbstractSlidermaximum(Pointer)
    returns int32 is native(&libwrapper) { * }

sub QWQAbstractSlidersetSingleStep(Pointer, int32)
    is native(&libwrapper) { * }

sub QWQAbstractSlidersingleStep(Pointer)
    returns int32 is native(&libwrapper) { * }

sub QWQAbstractSlidersetPageStep(Pointer, int32)
    is native(&libwrapper) { * }

sub QWQAbstractSliderpageStep(Pointer)
    returns int32 is native(&libwrapper) { * }

sub QWQAbstractSlidersetTracking(Pointer, int8)
    is native(&libwrapper) { * }

sub QWQAbstractSliderhasTracking(Pointer)
    returns int8 is native(&libwrapper) { * }

sub QWQAbstractSlidersetSliderDown(Pointer, int8)
    is native(&libwrapper) { * }

sub QWQAbstractSlidersetSliderPosition(Pointer, int32)
    is native(&libwrapper) { * }

sub QWQAbstractSlidersliderPosition(Pointer)
    returns int32 is native(&libwrapper) { * }

sub QWQAbstractSlidersetInvertedAppearance(Pointer, int8)
    is native(&libwrapper) { * }

sub QWQAbstractSliderinvertedAppearance(Pointer)
    returns int8 is native(&libwrapper) { * }

sub QWQAbstractSlidersetInvertedControls(Pointer, int8)
    is native(&libwrapper) { * }

sub QWQAbstractSliderinvertedControls(Pointer)
    returns int8 is native(&libwrapper) { * }

sub QWQAbstractSlidervalue(Pointer)
    returns int32 is native(&libwrapper) { * }

sub QWQAbstractSlidersetValue(Pointer, int32)
    is native(&libwrapper) { * }

sub QWQAbstractSlidersetOrientation(Pointer, int32)
    is native(&libwrapper) { * }

sub QWQAbstractSlidersetRange(Pointer, int32, int32)
    is native(&libwrapper) { * }

