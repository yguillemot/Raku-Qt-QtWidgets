
# 
# This file has been automatically generated by RaQt_maker V0.0.7.
# To modify and regenerate it, see the source code available here: 
#         https://github.com/yguillemot/RaQt_maker
# 

use NativeCall;
use Qt::QtWidgets:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::QtHelpers:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::QtWrappers:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::QtBase:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::RQSize:ver<0.0.7>:auth<zef:yguillemot>:api<2>;



class QSize:ver<0.0.7>:auth<zef:yguillemot>:api<2>
    is QtObject
    does RQSize
    is export {

    multi sub ctor(QtBase $this) {
        $this.address = QWQSizeCtor_1();
        $this.ownedByRaku = True;
    }

    multi sub subClassCtor(QtBase $this) {
        $this.address = SCWQSizeCtor_1();
        $this.ownedByRaku = True;
    }

    method validateCB(Str $m) {
        QWvalidateCB_QSize(self.address, self.id, $m);
    }

    multi sub ctor(QtBase $this, Int $w, Int $h) {
        $this.address = QWQSizeCtor_2($w, $h);
        $this.ownedByRaku = True;
    }

    multi sub subClassCtor(QtBase $this, Int $w, Int $h) {
        $this.address = SCWQSizeCtor_2($w, $h);
        $this.ownedByRaku = True;
    }

    multi sub ctor(QtBase $this, NativeCall::Types::Pointer $p, Bool :$obr = False) {
        # Get access to a preexisting Qt object
        $this.address = $p;
        $this.ownedByRaku = $obr;
    }

    multi sub ctor(|capture) {
        note "QtWidgets ", ::?CLASS.^name,
             " ctor called with unsupported args";
        die "Bad args";
    }

    submethod new(|capture) {
        my QSize $rObj = self.bless;
        ctor($rObj, |capture);
        return $rObj;
    }

    multi sub subClassCtor(|capture) {
        note "QtWidgets subclass ", ::?CLASS.^name,
             " ctor called with unsupported args";
        die "Bad args";
    }

    submethod subClass(|capture) {
        subClassCtor(self, |capture);
        self.validateCallBacks();
    }

    submethod DESTROY {
        if self.ownedByRaku {
            QWQSizeDtor(self.address);
            self.ownedByRaku = False;
        }
    }

    method isNull( --> Bool)
    {
        my $result = QWQSizeisNull(self.address);
        my $result1 = ?$result;
        return $result1;
    }

    method isEmpty( --> Bool)
    {
        my $result = QWQSizeisEmpty(self.address);
        my $result1 = ?$result;
        return $result1;
    }

    method isValid( --> Bool)
    {
        my $result = QWQSizeisValid(self.address);
        my $result1 = ?$result;
        return $result1;
    }

    method width( --> Int)
    {
        my $result = QWQSizewidth(self.address);
        return $result;
    }

    method height( --> Int)
    {
        my $result = QWQSizeheight(self.address);
        return $result;
    }

    method setWidth(Int $w)
    {
        QWQSizesetWidth(self.address, $w);
    }

    method setHeight(Int $h)
    {
        QWQSizesetHeight(self.address, $h);
    }

    method expandedTo(QSize $arg1 --> QSize)
    {
        my $a1 = $arg1.address;
        my $result = QWQSizeexpandedTo(self.address, $a1);
        my $result1 = QSize.new($result, obr => True);
        return $result1;
    }

    method boundedTo(QSize $arg1 --> QSize)
    {
        my $a1 = $arg1.address;
        my $result = QWQSizeboundedTo(self.address, $a1);
        my $result1 = QSize.new($result, obr => True);
        return $result1;
    }

}


sub QWQSizeCtor_1()
    returns Pointer is native(&libwrapper) { * }

sub SCWQSizeCtor_1()
    returns Pointer is native(&libwrapper) { * }

sub QWvalidateCB_QSize(Pointer, int32, Str)
    is native(&libwrapper) { * }

sub QWQSizeCtor_2(int32, int32)
    returns Pointer is native(&libwrapper) { * }

sub SCWQSizeCtor_2(int32, int32)
    returns Pointer is native(&libwrapper) { * }

sub QWQSizeDtor(Pointer)
    is native(&libwrapper) { * }

sub QWQSizeisNull(Pointer)
    returns int8 is native(&libwrapper) { * }

sub QWQSizeisEmpty(Pointer)
    returns int8 is native(&libwrapper) { * }

sub QWQSizeisValid(Pointer)
    returns int8 is native(&libwrapper) { * }

sub QWQSizewidth(Pointer)
    returns int32 is native(&libwrapper) { * }

sub QWQSizeheight(Pointer)
    returns int32 is native(&libwrapper) { * }

sub QWQSizesetWidth(Pointer, int32)
    is native(&libwrapper) { * }

sub QWQSizesetHeight(Pointer, int32)
    is native(&libwrapper) { * }

sub QWQSizeexpandedTo(Pointer, Pointer)
    returns Pointer is native(&libwrapper) { * }

sub QWQSizeboundedTo(Pointer, Pointer)
    returns Pointer is native(&libwrapper) { * }

