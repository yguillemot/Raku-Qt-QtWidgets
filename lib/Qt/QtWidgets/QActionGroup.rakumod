
# 
# This file has been automatically generated by RaQt_maker V0.0.7.
# To modify and regenerate it, see the source code available here: 
#         https://github.com/yguillemot/RaQt_maker
# 

use NativeCall;
use Qt::QtWidgets:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::QtHelpers:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::QtWrappers:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::QAction:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::QObject:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::QtBase:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::RQActionGroup:ver<0.0.7>:auth<zef:yguillemot>:api<2>;



class QActionGroup:ver<0.0.7>:auth<zef:yguillemot>:api<2>
    is QObject
    is QtObject
    does RQActionGroup
    is export {

    multi sub ctor(QtBase $this, QObject $parent) {
        my $a1 = ?$parent ?? $parent.address !! QWInt2Pointer(0);
        $this.address = QWQActionGroupCtor($a1);
        $this.ownedByRaku = True;
    }

    multi sub subClassCtor(QtBase $this, QObject $parent) {
        my $a1 = ?$parent ?? $parent.address !! QWInt2Pointer(0);
        $this.address = SCWQActionGroupCtor($a1);
        $this.ownedByRaku = True;
    }

    method validateCB(Str $m) {
        QWvalidateCB_QActionGroup(self.address, self.id, $m);
    }

    multi sub ctor(QtBase $this, NativeCall::Types::Pointer $p, Bool :$obr = False) {
        # Get access to a preexisting Qt object
        $this.address = $p;
        $this.ownedByRaku = $obr;
    }

    multi sub ctor(|capture) {
        note "QtWidgets ", ::?CLASS.^name,
             " ctor called with unsupported args";
        die "Bad args";
    }

    submethod new(|capture) {
        my QActionGroup $rObj = self.bless;
        ctor($rObj, |capture);
        return $rObj;
    }

    multi sub subClassCtor(|capture) {
        note "QtWidgets subclass ", ::?CLASS.^name,
             " ctor called with unsupported args";
        die "Bad args";
    }

    submethod subClass(|capture) {
        subClassCtor(self, |capture);
        self.validateCallBacks();
    }

    submethod DESTROY {
        if self.ownedByRaku {
            QWQActionGroupDtor(self.address);
            self.ownedByRaku = False;
        }
    }

    multi method addAction(QAction $a --> QAction)
    {
        my $a1 = ?$a ?? $a.address !! QWInt2Pointer(0);
        my $result = QWQActionGroupaddAction_1(self.address, $a1);
        my $result1 = QAction.new($result, obr => False);
        return $result1;
    }

}


sub QWQActionGroupCtor(Pointer)
    returns Pointer is native(&libwrapper) { * }

sub SCWQActionGroupCtor(Pointer)
    returns Pointer is native(&libwrapper) { * }

sub QWvalidateCB_QActionGroup(Pointer, int32, Str)
    is native(&libwrapper) { * }

sub QWQActionGroupDtor(Pointer)
    is native(&libwrapper) { * }

sub QWQActionGroupaddAction_1(Pointer, Pointer)
    returns Pointer is native(&libwrapper) { * }

