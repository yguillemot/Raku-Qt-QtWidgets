
# 
# This file has been automatically generated by RaQt_maker V0.0.7.
# To modify and regenerate it, see the source code available here: 
#         https://github.com/yguillemot/RaQt_maker
# 

use NativeCall;
use Qt::QtWidgets:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::QtHelpers:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::QtWrappers:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::QtBase:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::RQPoint:ver<0.0.7>:auth<zef:yguillemot>:api<2>;



class QPoint:ver<0.0.7>:auth<zef:yguillemot>:api<2>
    is QtObject
    does RQPoint
    is export {

    multi sub ctor(QtBase $this) {
        $this.address = QWQPointCtor_1();
        $this.ownedByRaku = True;
    }

    multi sub subClassCtor(QtBase $this) {
        $this.address = SCWQPointCtor_1();
        $this.ownedByRaku = True;
    }

    method validateCB(Str $m) {
        QWvalidateCB_QPoint(self.address, self.id, $m);
    }

    multi sub ctor(QtBase $this, Int $xpos, Int $ypos) {
        $this.address = QWQPointCtor_2($xpos, $ypos);
        $this.ownedByRaku = True;
    }

    multi sub subClassCtor(QtBase $this, Int $xpos, Int $ypos) {
        $this.address = SCWQPointCtor_2($xpos, $ypos);
        $this.ownedByRaku = True;
    }

    multi sub ctor(QtBase $this, NativeCall::Types::Pointer $p, Bool :$obr = False) {
        # Get access to a preexisting Qt object
        $this.address = $p;
        $this.ownedByRaku = $obr;
    }

    multi sub ctor(|capture) {
        note "QtWidgets ", ::?CLASS.^name,
             " ctor called with unsupported args";
        die "Bad args";
    }

    submethod new(|capture) {
        my QPoint $rObj = self.bless;
        ctor($rObj, |capture);
        return $rObj;
    }

    multi sub subClassCtor(|capture) {
        note "QtWidgets subclass ", ::?CLASS.^name,
             " ctor called with unsupported args";
        die "Bad args";
    }

    submethod subClass(|capture) {
        subClassCtor(self, |capture);
        self.validateCallBacks();
    }

    submethod DESTROY {
        if self.ownedByRaku {
            QWQPointDtor(self.address);
            self.ownedByRaku = False;
        }
    }

    method isNull( --> Bool)
    {
        my $result = QWQPointisNull(self.address);
        my $result1 = ?$result;
        return $result1;
    }

    method x( --> Int)
    {
        my $result = QWQPointx(self.address);
        return $result;
    }

    method y( --> Int)
    {
        my $result = QWQPointy(self.address);
        return $result;
    }

    method setX(Int $x)
    {
        QWQPointsetX(self.address, $x);
    }

    method setY(Int $y)
    {
        QWQPointsetY(self.address, $y);
    }

    method manhattanLength( --> Int)
    {
        my $result = QWQPointmanhattanLength(self.address);
        return $result;
    }

}


sub QWQPointCtor_1()
    returns Pointer is native(&libwrapper) { * }

sub SCWQPointCtor_1()
    returns Pointer is native(&libwrapper) { * }

sub QWvalidateCB_QPoint(Pointer, int32, Str)
    is native(&libwrapper) { * }

sub QWQPointCtor_2(int32, int32)
    returns Pointer is native(&libwrapper) { * }

sub SCWQPointCtor_2(int32, int32)
    returns Pointer is native(&libwrapper) { * }

sub QWQPointDtor(Pointer)
    is native(&libwrapper) { * }

sub QWQPointisNull(Pointer)
    returns int8 is native(&libwrapper) { * }

sub QWQPointx(Pointer)
    returns int32 is native(&libwrapper) { * }

sub QWQPointy(Pointer)
    returns int32 is native(&libwrapper) { * }

sub QWQPointsetX(Pointer, int32)
    is native(&libwrapper) { * }

sub QWQPointsetY(Pointer, int32)
    is native(&libwrapper) { * }

sub QWQPointmanhattanLength(Pointer)
    returns int32 is native(&libwrapper) { * }

