
# 
# This file has been automatically generated by RaQt_maker V0.0.7.
# To modify and regenerate it, see the source code available here: 
#         https://github.com/yguillemot/RaQt_maker
# 

use NativeCall;
use Qt::QtWidgets:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::QtHelpers:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::QtWrappers:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::QAbstractButton:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::QWidget:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::QtBase:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::RQMenu:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::RQPushButton:ver<0.0.7>:auth<zef:yguillemot>:api<2>;



class QPushButton:ver<0.0.7>:auth<zef:yguillemot>:api<2>
    is QAbstractButton
    is QtObject
    does RQPushButton
    is export {

    multi sub ctor(QtBase $this, Str $text, QWidget $parent = (QWidget)) {
        my $a2 = ?$parent ?? $parent.address !! QWInt2Pointer(0);
        $this.address = QWQPushButtonCtor_2($text, $a2);
        $this.ownedByRaku = True;
    }

    multi sub subClassCtor(QtBase $this, Str $text, QWidget $parent = (QWidget)) {
        my $a2 = ?$parent ?? $parent.address !! QWInt2Pointer(0);
        $this.address = SCWQPushButtonCtor_2($text, $a2);
        $this.ownedByRaku = True;
    }

    method validateCB(Str $m) {
        QWvalidateCB_QPushButton(self.address, self.id, $m);
    }

    multi sub ctor(QtBase $this, NativeCall::Types::Pointer $p, Bool :$obr = False) {
        # Get access to a preexisting Qt object
        $this.address = $p;
        $this.ownedByRaku = $obr;
    }

    multi sub ctor(|capture) {
        note "QtWidgets ", ::?CLASS.^name,
             " ctor called with unsupported args";
        die "Bad args";
    }

    submethod new(|capture) {
        my QPushButton $rObj = self.bless;
        ctor($rObj, |capture);
        return $rObj;
    }

    multi sub subClassCtor(|capture) {
        note "QtWidgets subclass ", ::?CLASS.^name,
             " ctor called with unsupported args";
        die "Bad args";
    }

    submethod subClass(|capture) {
        subClassCtor(self, |capture);
        self.validateCallBacks();
    }

    submethod DESTROY {
        if self.ownedByRaku {
            QWQPushButtonDtor(self.address);
            self.ownedByRaku = False;
        }
    }

    method setMenu(RQMenu $menu)
    {
        my $a1 = ?$menu ?? $menu.address !! QWInt2Pointer(0);
        QWQPushButtonsetMenu(self.address, $a1);
    }

}


sub QWQPushButtonCtor_2(Str, Pointer)
    returns Pointer is native(&libwrapper) { * }

sub SCWQPushButtonCtor_2(Str, Pointer)
    returns Pointer is native(&libwrapper) { * }

sub QWvalidateCB_QPushButton(Pointer, int32, Str)
    is native(&libwrapper) { * }

sub QWQPushButtonDtor(Pointer)
    is native(&libwrapper) { * }

sub QWQPushButtonsetMenu(Pointer, Pointer)
    is native(&libwrapper) { * }

