
# 
# This file has been automatically generated by RaQt_maker V0.0.2.
# To modify and regenerate it, see the source code available here: 
#         https://github.com/yguillemot/RaQt_maker
# 

use NativeCall;
use Qt::QtWidgets::QtHelpers:ver<0.0.2>:auth<cpan:YGUILLEMO>:api<2>;
use Qt::QtWidgets::QtWrappers:ver<0.0.2>:auth<cpan:YGUILLEMO>:api<2>;
use Qt::QtWidgets::QEvent:ver<0.0.2>:auth<cpan:YGUILLEMO>:api<2>;
use Qt::QtWidgets::QRect:ver<0.0.2>:auth<cpan:YGUILLEMO>:api<2>;
use Qt::QtWidgets::QtBase:ver<0.0.2>:auth<cpan:YGUILLEMO>:api<2>;



class QPaintEvent:ver<0.0.2>:auth<cpan:YGUILLEMO>:api<2>
    is QEvent
    is export {

    multi sub ctor(QtBase $this, QRect $paintRect) {
        my $a1 = $paintRect.address;
        $this.address = QWQPaintEventCtor_2($a1);
        $this.ownedByRaku = True;
    }

    multi sub ctor(QtBase $this, NativeCall::Types::Pointer $p, Bool :$obr = False) {
        # Get access to a preexisting Qt object
        $this.address = $p;
        $this.ownedByRaku = $obr;
    }

    multi sub ctor(|capture) {
        note "QtWidgets ", ::?CLASS.^name,
             " ctor called with unsupported args";
        die "Bad args";
    }

    submethod new(|capture) {
        my QPaintEvent $rObj = self.bless;
        ctor($rObj, |capture);
        return $rObj;
    }

    submethod DESTROY {
        if self.ownedByRaku {
            QWQPaintEventDtor(self.address);
            self.ownedByRaku = False;
        }
    }

    method rect( --> QRect)
    {
        my $result = QWQPaintEventrect(self.address);
        my $result1 = QRect.new($result, obr => False);
        return $result1;
    }

}


sub QWQPaintEventCtor_2(Pointer)
    returns Pointer is native(&libwrapper) { * }

sub QWQPaintEventDtor(Pointer)
    is native(&libwrapper) { * }

sub QWQPaintEventrect(Pointer)
    returns Pointer is native(&libwrapper) { * }

