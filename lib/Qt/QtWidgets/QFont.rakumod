
# 
# This file has been automatically generated by RaQt_maker V0.0.7.
# To modify and regenerate it, see the source code available here: 
#         https://github.com/yguillemot/RaQt_maker
# 

use NativeCall;
use Qt::QtWidgets:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::QtHelpers:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::QtWrappers:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::QtBase:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::RQFont:ver<0.0.7>:auth<zef:yguillemot>:api<2>;



class QFont:ver<0.0.7>:auth<zef:yguillemot>:api<2>
    is QtObject
    does RQFont
    is export {

    multi sub ctor(QtBase $this) {
        $this.address = QWQFontCtor_1();
        $this.ownedByRaku = True;
    }

    multi sub subClassCtor(QtBase $this) {
        $this.address = SCWQFontCtor_1();
        $this.ownedByRaku = True;
    }

    method validateCB(Str $m) {
        QWvalidateCB_QFont(self.address, self.id, $m);
    }

    multi sub ctor(QtBase $this, NativeCall::Types::Pointer $p, Bool :$obr = False) {
        # Get access to a preexisting Qt object
        $this.address = $p;
        $this.ownedByRaku = $obr;
    }

    multi sub ctor(|capture) {
        note "QtWidgets ", ::?CLASS.^name,
             " ctor called with unsupported args";
        die "Bad args";
    }

    submethod new(|capture) {
        my QFont $rObj = self.bless;
        ctor($rObj, |capture);
        return $rObj;
    }

    multi sub subClassCtor(|capture) {
        note "QtWidgets subclass ", ::?CLASS.^name,
             " ctor called with unsupported args";
        die "Bad args";
    }

    submethod subClass(|capture) {
        subClassCtor(self, |capture);
        self.validateCallBacks();
    }

    submethod DESTROY {
        if self.ownedByRaku {
            QWQFontDtor(self.address);
            self.ownedByRaku = False;
        }
    }

    method setFamily(Str $arg1)
    {
        QWQFontsetFamily(self.address, $arg1);
    }

    method pointSize( --> Int)
    {
        my $result = QWQFontpointSize(self.address);
        return $result;
    }

    method setPointSize(Int $arg1)
    {
        QWQFontsetPointSize(self.address, $arg1);
    }

    method bold( --> Bool)
    {
        my $result = QWQFontbold(self.address);
        my $result1 = ?$result;
        return $result1;
    }

    method setBold(Bool $arg1)
    {
        my int8 $a1 = $arg1.Int;
        QWQFontsetBold(self.address, $a1);
    }

    method italic( --> Bool)
    {
        my $result = QWQFontitalic(self.address);
        my $result1 = ?$result;
        return $result1;
    }

    method setItalic(Bool $b)
    {
        my int8 $a1 = $b.Int;
        QWQFontsetItalic(self.address, $a1);
    }

    method stretch( --> Int)
    {
        my $result = QWQFontstretch(self.address);
        return $result;
    }

    method setStretch(Int $arg1)
    {
        QWQFontsetStretch(self.address, $arg1);
    }

}


sub QWQFontCtor_1()
    returns Pointer is native(&libwrapper) { * }

sub SCWQFontCtor_1()
    returns Pointer is native(&libwrapper) { * }

sub QWvalidateCB_QFont(Pointer, int32, Str)
    is native(&libwrapper) { * }

sub QWQFontDtor(Pointer)
    is native(&libwrapper) { * }

sub QWQFontsetFamily(Pointer, Str)
    is native(&libwrapper) { * }

sub QWQFontpointSize(Pointer)
    returns int32 is native(&libwrapper) { * }

sub QWQFontsetPointSize(Pointer, int32)
    is native(&libwrapper) { * }

sub QWQFontbold(Pointer)
    returns int8 is native(&libwrapper) { * }

sub QWQFontsetBold(Pointer, int8)
    is native(&libwrapper) { * }

sub QWQFontitalic(Pointer)
    returns int8 is native(&libwrapper) { * }

sub QWQFontsetItalic(Pointer, int8)
    is native(&libwrapper) { * }

sub QWQFontstretch(Pointer)
    returns int32 is native(&libwrapper) { * }

sub QWQFontsetStretch(Pointer, int32)
    is native(&libwrapper) { * }

