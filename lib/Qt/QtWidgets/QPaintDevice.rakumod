
# 
# This file has been automatically generated by RaQt_maker V0.0.7.
# To modify and regenerate it, see the source code available here: 
#         https://github.com/yguillemot/RaQt_maker
# 

use NativeCall;
use Qt::QtWidgets:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::QtHelpers:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::QtWrappers:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::QtBase:ver<0.0.7>:auth<zef:yguillemot>:api<2>;
use Qt::QtWidgets::RQPaintDevice:ver<0.0.7>:auth<zef:yguillemot>:api<2>;



class QPaintDevice:ver<0.0.7>:auth<zef:yguillemot>:api<2>
    is QtObject
    does RQPaintDevice
    is export {

    my constant %callers = {
        "QAbstractButton" => 0,
        "QAbstractItemView" => 1,
        "QAbstractScrollArea" => 2,
        "QAbstractSlider" => 3,
        "QAbstractSpinBox" => 4,
        "QBitmap" => 5,
        "QCalendarWidget" => 6,
        "QCheckBox" => 7,
        "QColorDialog" => 8,
        "QColumnView" => 9,
        "QComboBox" => 10,
        "QCommandLinkButton" => 11,
        "QDateEdit" => 12,
        "QDateTimeEdit" => 13,
        "QDesktopWidget" => 14,
        "QDial" => 15,
        "QDialog" => 16,
        "QDialogButtonBox" => 17,
        "QDockWidget" => 18,
        "QDoubleSpinBox" => 19,
        "QErrorMessage" => 20,
        "QFileDialog" => 21,
        "QFocusFrame" => 22,
        "QFontComboBox" => 23,
        "QFontDialog" => 24,
        "QFrame" => 25,
        "QGraphicsView" => 26,
        "QGroupBox" => 27,
        "QHeaderView" => 28,
        "QImage" => 29,
        "QInputDialog" => 30,
        "QKeySequenceEdit" => 31,
        "QLCDNumber" => 32,
        "QLabel" => 33,
        "QLineEdit" => 34,
        "QListView" => 35,
        "QListWidget" => 36,
        "QMainWindow" => 37,
        "QMdiArea" => 38,
        "QMdiSubWindow" => 39,
        "QMenu" => 40,
        "QMenuBar" => 41,
        "QMessageBox" => 42,
        "QOpenGLPaintDevice" => 43,
        "QOpenGLWidget" => 44,
        "QOpenGLWindow" => 45,
        "QPagedPaintDevice" => 46,
        "QPaintDeviceWindow" => 47,
        "QPdfWriter" => 48,
        "QPicture" => 49,
        "QPixmap" => 50,
        "QPlainTextEdit" => 51,
        "QProgressBar" => 52,
        "QProgressDialog" => 53,
        "QPushButton" => 54,
        "QRadioButton" => 55,
        "QRasterWindow" => 56,
        "QRubberBand" => 57,
        "QScrollArea" => 58,
        "QScrollBar" => 59,
        "QSizeGrip" => 60,
        "QSlider" => 61,
        "QSpinBox" => 62,
        "QSplashScreen" => 63,
        "QSplitter" => 64,
        "QSplitterHandle" => 65,
        "QStackedWidget" => 66,
        "QStatusBar" => 67,
        "QTabBar" => 68,
        "QTabWidget" => 69,
        "QTableView" => 70,
        "QTableWidget" => 71,
        "QTextBrowser" => 72,
        "QTextEdit" => 73,
        "QTimeEdit" => 74,
        "QToolBar" => 75,
        "QToolBox" => 76,
        "QToolButton" => 77,
        "QTreeView" => 78,
        "QTreeWidget" => 79,
        "QUndoView" => 80,
        "QWidget" => 81,
        "QWizard" => 82,
        "QWizardPage" => 83,
    }

    multi sub ctor(QtBase $this, NativeCall::Types::Pointer $p) {
        # Get access to a preexisting Qt object
        $this.address = $p;
        $this.ownedByRaku = False;
    }

    multi sub ctor(|capture) is hidden-from-backtrace {
        unimplementedCtor("QPaintDevice");
    }

    submethod new(|capture) {
        my QPaintDevice $rObj = self.bless;
        ctor($rObj, |capture);
        return $rObj;
    }

}


